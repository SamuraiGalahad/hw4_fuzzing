/Users/nikolajparahin/Downloads/fuzzing_hw4/src/MyToken.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // Compatible with OpenZeppelin Contracts ^5.0.0
  3 |     | pragma solidity ^0.8.22;
  4 |     | 
  5 |     | import {ERC20} from "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
  6 |     | import {ERC20Burnable} from "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol";
  7 |     | import {ERC20Pausable} from "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol";
  8 |     | import {ERC20Permit} from "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol";
  9 |     | import {Ownable} from "lib/openzeppelin-contracts/contracts/access/Ownable.sol";
 10 |     | 
 11 |     | contract MyToken is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {
 12 | *   |     constructor(
 13 |     |         address initialOwner
 14 | *   |     ) ERC20("MyToken", "MTK") Ownable(initialOwner) ERC20Permit("MyToken") {}
 15 |     | 
 16 | *   |     function pause() public onlyOwner {
 17 |     |         _pause();
 18 |     |     }
 19 |     | 
 20 | *   |     function unpause() public onlyOwner {
 21 |     |         _unpause();
 22 |     |     }
 23 |     | 
 24 | *   |     function mint(address to, uint256 amount) public virtual onlyOwner {
 25 | *   |         _mint(to, amount);
 26 |     |     }
 27 |     | 
 28 |     |     // The following functions are overrides required by Solidity.
 29 |     | 
 30 | *   |     function totalSupply()
 31 |     |         public
 32 |     |         pure
 33 |     |         virtual
 34 |     |         override(ERC20)
 35 | *   |         returns (uint256)
 36 |     |     {
 37 | *   |         return 1;
 38 |     |     }
 39 |     | 
 40 | *   |     function transfer(
 41 |     |         address to,
 42 |     |         uint256 amount
 43 | *   |     ) public virtual override returns (bool) {
 44 | *   |         if (to == address(0)) {
 45 | *   |             return false; // Запрещаем transfer в zero address
 46 |     |         }
 47 | *   |         return super.transfer(to, amount);
 48 |     |     }
 49 |     | 
 50 | *   |     function burn(uint256 amount) public virtual override {
 51 | *   |         super.burn(amount);
 52 | *   |         _mint(msg.sender, amount); // Восстанавливаем сожженное
 53 |     |     }
 54 |     | 
 55 | *   |     function transferFrom(
 56 |     |         address from,
 57 |     |         address to,
 58 |     |         uint256 amount
 59 | *   |     ) public virtual override returns (bool) {
 60 | *   |         if (from == to) {
 61 | *   |             amount += 1000; // Увеличиваем amount для self-transfers
 62 |     |         }
 63 | *   |         return super.transferFrom(from, to, amount);
 64 |     |     }
 65 |     | 
 66 | *   |     function _update(
 67 |     |         address from,
 68 |     |         address to,
 69 |     |         uint256 value
 70 |     |     ) internal virtual override(ERC20, ERC20Pausable) {
 71 | *   |         super._update(from, to, value);
 72 |     |     }
 73 |     | }
 74 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/MyTokenExternal.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // Compatible with OpenZeppelin Contracts ^5.0.0
  3 |     | pragma solidity ^0.8.22;
  4 |     | 
  5 |     | import "lib/properties/contracts/ERC20/external/properties/ERC20ExternalBasicProperties.sol";
  6 |     | import "lib/properties/contracts/ERC20/external/properties/ERC20ExternalBurnableProperties.sol";
  7 |     | import "lib/properties/contracts/ERC20/external/properties/ERC20ExternalMintableProperties.sol";
  8 |     | import "lib/properties/contracts/ERC20/external/util/ITokenMock.sol";
  9 |     | import "lib/properties/contracts/util/PropertiesConstants.sol";
 10 |     | import "MyToken.sol";
 11 |     | 
 12 | *r  | contract MyTokenExternal is
 13 |     |     CryticERC20ExternalBasicProperties,
 14 |     |     CryticERC20ExternalBurnableProperties,
 15 |     |     CryticERC20ExternalMintableProperties
 16 |     | {
 17 | *   |     constructor() {
 18 | *   |         token = ITokenMock(address(new ExternalTokenMock()));
 19 |     |     }
 20 |     | }
 21 |     | 
 22 | *r  | contract ExternalTokenMock is MyToken, PropertiesConstants {
 23 | *   |     bool public isMintableOrBurnable;
 24 | *   |     uint256 public initialSupply;
 25 |     | 
 26 | *   |     constructor() MyToken(msg.sender) {
 27 | *   |         mint(USER1, INITIAL_BALANCE);
 28 | *   |         mint(USER2, INITIAL_BALANCE);
 29 | *   |         mint(USER3, INITIAL_BALANCE);
 30 | *   |         mint(msg.sender, INITIAL_BALANCE);
 31 |     | 
 32 | *   |         initialSupply = totalSupply();
 33 | *   |         isMintableOrBurnable = true;
 34 |     |     }
 35 |     | }
 36 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/access/Ownable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Context} from "../utils/Context.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Contract module which provides a basic access control mechanism, where
  10 |     |  * there is an account (an owner) that can be granted exclusive access to
  11 |     |  * specific functions.
  12 |     |  *
  13 |     |  * The initial owner is set to the address provided by the deployer. This can
  14 |     |  * later be changed with {transferOwnership}.
  15 |     |  *
  16 |     |  * This module is used through inheritance. It will make available the modifier
  17 |     |  * `onlyOwner`, which can be applied to your functions to restrict their use to
  18 |     |  * the owner.
  19 |     |  */
  20 |     | abstract contract Ownable is Context {
  21 |     |     address private _owner;
  22 |     | 
  23 |     |     /**
  24 |     |      * @dev The caller account is not authorized to perform an operation.
  25 |     |      */
  26 |     |     error OwnableUnauthorizedAccount(address account);
  27 |     | 
  28 |     |     /**
  29 |     |      * @dev The owner is not a valid owner account. (eg. `address(0)`)
  30 |     |      */
  31 |     |     error OwnableInvalidOwner(address owner);
  32 |     | 
  33 |     |     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  34 |     | 
  35 |     |     /**
  36 |     |      * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
  37 |     |      */
  38 | *   |     constructor(address initialOwner) {
  39 | *   |         if (initialOwner == address(0)) {
  40 |     |             revert OwnableInvalidOwner(address(0));
  41 |     |         }
  42 | *   |         _transferOwnership(initialOwner);
  43 |     |     }
  44 |     | 
  45 |     |     /**
  46 |     |      * @dev Throws if called by any account other than the owner.
  47 |     |      */
  48 |     |     modifier onlyOwner() {
  49 | *   |         _checkOwner();
  50 |     |         _;
  51 |     |     }
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev Returns the address of the current owner.
  55 |     |      */
  56 | *   |     function owner() public view virtual returns (address) {
  57 | *   |         return _owner;
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Throws if the sender is not the owner.
  62 |     |      */
  63 | *   |     function _checkOwner() internal view virtual {
  64 | *   |         if (owner() != _msgSender()) {
  65 | *r  |             revert OwnableUnauthorizedAccount(_msgSender());
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Leaves the contract without owner. It will not be possible to call
  71 |     |      * `onlyOwner` functions. Can only be called by the current owner.
  72 |     |      *
  73 |     |      * NOTE: Renouncing ownership will leave the contract without an owner,
  74 |     |      * thereby disabling any functionality that is only available to the owner.
  75 |     |      */
  76 | *   |     function renounceOwnership() public virtual onlyOwner {
  77 |     |         _transferOwnership(address(0));
  78 |     |     }
  79 |     | 
  80 |     |     /**
  81 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  82 |     |      * Can only be called by the current owner.
  83 |     |      */
  84 | *   |     function transferOwnership(address newOwner) public virtual onlyOwner {
  85 |     |         if (newOwner == address(0)) {
  86 |     |             revert OwnableInvalidOwner(address(0));
  87 |     |         }
  88 |     |         _transferOwnership(newOwner);
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  93 |     |      * Internal function without access restriction.
  94 |     |      */
  95 | *   |     function _transferOwnership(address newOwner) internal virtual {
  96 | *   |         address oldOwner = _owner;
  97 | *   |         _owner = newOwner;
  98 | *   |         emit OwnershipTransferred(oldOwner, newOwner);
  99 |     |     }
 100 |     | }
 101 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | interface IERC5267 {
  7 |     |     /**
  8 |     |      * @dev MAY be emitted to signal that the domain could have changed.
  9 |     |      */
 10 |     |     event EIP712DomainChanged();
 11 |     | 
 12 |     |     /**
 13 |     |      * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712
 14 |     |      * signature.
 15 |     |      */
 16 |     |     function eip712Domain()
 17 |     |         external
 18 |     |         view
 19 |     |         returns (
 20 |     |             bytes1 fields,
 21 |     |             string memory name,
 22 |     |             string memory version,
 23 |     |             uint256 chainId,
 24 |     |             address verifyingContract,
 25 |     |             bytes32 salt,
 26 |     |             uint256[] memory extensions
 27 |     |         );
 28 |     | }
 29 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)
   3 |     | pragma solidity ^0.8.20;
   4 |     | 
   5 |     | /**
   6 |     |  * @dev Standard ERC-20 Errors
   7 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.
   8 |     |  */
   9 |     | interface IERC20Errors {
  10 |     |     /**
  11 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
  12 |     |      * @param sender Address whose tokens are being transferred.
  13 |     |      * @param balance Current balance for the interacting account.
  14 |     |      * @param needed Minimum amount required to perform a transfer.
  15 |     |      */
  16 |     |     error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
  17 |     | 
  18 |     |     /**
  19 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  20 |     |      * @param sender Address whose tokens are being transferred.
  21 |     |      */
  22 |     |     error ERC20InvalidSender(address sender);
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  26 |     |      * @param receiver Address to which tokens are being transferred.
  27 |     |      */
  28 |     |     error ERC20InvalidReceiver(address receiver);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
  32 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  33 |     |      * @param allowance Amount of tokens a `spender` is allowed to operate with.
  34 |     |      * @param needed Minimum amount required to perform a transfer.
  35 |     |      */
  36 |     |     error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  40 |     |      * @param approver Address initiating an approval operation.
  41 |     |      */
  42 |     |     error ERC20InvalidApprover(address approver);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
  46 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  47 |     |      */
  48 |     |     error ERC20InvalidSpender(address spender);
  49 |     | }
  50 |     | 
  51 |     | /**
  52 |     |  * @dev Standard ERC-721 Errors
  53 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.
  54 |     |  */
  55 |     | interface IERC721Errors {
  56 |     |     /**
  57 |     |      * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.
  58 |     |      * Used in balance queries.
  59 |     |      * @param owner Address of the current owner of a token.
  60 |     |      */
  61 |     |     error ERC721InvalidOwner(address owner);
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Indicates a `tokenId` whose `owner` is the zero address.
  65 |     |      * @param tokenId Identifier number of a token.
  66 |     |      */
  67 |     |     error ERC721NonexistentToken(uint256 tokenId);
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
  71 |     |      * @param sender Address whose tokens are being transferred.
  72 |     |      * @param tokenId Identifier number of a token.
  73 |     |      * @param owner Address of the current owner of a token.
  74 |     |      */
  75 |     |     error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  79 |     |      * @param sender Address whose tokens are being transferred.
  80 |     |      */
  81 |     |     error ERC721InvalidSender(address sender);
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  85 |     |      * @param receiver Address to which tokens are being transferred.
  86 |     |      */
  87 |     |     error ERC721InvalidReceiver(address receiver);
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
  91 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
  92 |     |      * @param tokenId Identifier number of a token.
  93 |     |      */
  94 |     |     error ERC721InsufficientApproval(address operator, uint256 tokenId);
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  98 |     |      * @param approver Address initiating an approval operation.
  99 |     |      */
 100 |     |     error ERC721InvalidApprover(address approver);
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 104 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 105 |     |      */
 106 |     |     error ERC721InvalidOperator(address operator);
 107 |     | }
 108 |     | 
 109 |     | /**
 110 |     |  * @dev Standard ERC-1155 Errors
 111 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.
 112 |     |  */
 113 |     | interface IERC1155Errors {
 114 |     |     /**
 115 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
 116 |     |      * @param sender Address whose tokens are being transferred.
 117 |     |      * @param balance Current balance for the interacting account.
 118 |     |      * @param needed Minimum amount required to perform a transfer.
 119 |     |      * @param tokenId Identifier number of a token.
 120 |     |      */
 121 |     |     error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
 125 |     |      * @param sender Address whose tokens are being transferred.
 126 |     |      */
 127 |     |     error ERC1155InvalidSender(address sender);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
 131 |     |      * @param receiver Address to which tokens are being transferred.
 132 |     |      */
 133 |     |     error ERC1155InvalidReceiver(address receiver);
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
 137 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 138 |     |      * @param owner Address of the current owner of a token.
 139 |     |      */
 140 |     |     error ERC1155MissingApprovalForAll(address operator, address owner);
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
 144 |     |      * @param approver Address initiating an approval operation.
 145 |     |      */
 146 |     |     error ERC1155InvalidApprover(address approver);
 147 |     | 
 148 |     |     /**
 149 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 150 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 151 |     |      */
 152 |     |     error ERC1155InvalidOperator(address operator);
 153 |     | 
 154 |     |     /**
 155 |     |      * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
 156 |     |      * Used in batch transfers.
 157 |     |      * @param idsLength Length of the array of token identifiers
 158 |     |      * @param valuesLength Length of the array of token amounts
 159 |     |      */
 160 |     |     error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
 161 |     | }
 162 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "./IERC20.sol";
   7 |     | import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
   8 |     | import {Context} from "../../utils/Context.sol";
   9 |     | import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Implementation of the {IERC20} interface.
  13 |     |  *
  14 |     |  * This implementation is agnostic to the way tokens are created. This means
  15 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * The default value of {decimals} is 18. To change this, you should override
  22 |     |  * this function so it returns a different value.
  23 |     |  *
  24 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  25 |     |  * instead returning `false` on failure. This behavior is nonetheless
  26 |     |  * conventional and does not conflict with the expectations of ERC-20
  27 |     |  * applications.
  28 |     |  */
  29 |     | abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
  30 |     |     mapping(address account => uint256) private _balances;
  31 |     | 
  32 |     |     mapping(address account => mapping(address spender => uint256)) private _allowances;
  33 |     | 
  34 |     |     uint256 private _totalSupply;
  35 |     | 
  36 |     |     string private _name;
  37 |     |     string private _symbol;
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev Sets the values for {name} and {symbol}.
  41 |     |      *
  42 |     |      * All two of these values are immutable: they can only be set once during
  43 |     |      * construction.
  44 |     |      */
  45 | *   |     constructor(string memory name_, string memory symbol_) {
  46 | *   |         _name = name_;
  47 | *   |         _symbol = symbol_;
  48 |     |     }
  49 |     | 
  50 |     |     /**
  51 |     |      * @dev Returns the name of the token.
  52 |     |      */
  53 | *   |     function name() public view virtual returns (string memory) {
  54 | *   |         return _name;
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  59 |     |      * name.
  60 |     |      */
  61 |     |     function symbol() public view virtual returns (string memory) {
  62 |     |         return _symbol;
  63 |     |     }
  64 |     | 
  65 |     |     /**
  66 |     |      * @dev Returns the number of decimals used to get its user representation.
  67 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  68 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  69 |     |      *
  70 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  71 |     |      * Ether and Wei. This is the default value returned by this function, unless
  72 |     |      * it's overridden.
  73 |     |      *
  74 |     |      * NOTE: This information is only used for _display_ purposes: it in
  75 |     |      * no way affects any of the arithmetic of the contract, including
  76 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  77 |     |      */
  78 |     |     function decimals() public view virtual returns (uint8) {
  79 |     |         return 18;
  80 |     |     }
  81 |     | 
  82 |     |     /**
  83 |     |      * @dev See {IERC20-totalSupply}.
  84 |     |      */
  85 |     |     function totalSupply() public view virtual returns (uint256) {
  86 |     |         return _totalSupply;
  87 |     |     }
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev See {IERC20-balanceOf}.
  91 |     |      */
  92 | *   |     function balanceOf(address account) public view virtual returns (uint256) {
  93 | *   |         return _balances[account];
  94 |     |     }
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev See {IERC20-transfer}.
  98 |     |      *
  99 |     |      * Requirements:
 100 |     |      *
 101 |     |      * - `to` cannot be the zero address.
 102 |     |      * - the caller must have a balance of at least `value`.
 103 |     |      */
 104 | *   |     function transfer(address to, uint256 value) public virtual returns (bool) {
 105 | *   |         address owner = _msgSender();
 106 | *   |         _transfer(owner, to, value);
 107 | *   |         return true;
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev See {IERC20-allowance}.
 112 |     |      */
 113 | *   |     function allowance(address owner, address spender) public view virtual returns (uint256) {
 114 | *   |         return _allowances[owner][spender];
 115 |     |     }
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev See {IERC20-approve}.
 119 |     |      *
 120 |     |      * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
 121 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 122 |     |      *
 123 |     |      * Requirements:
 124 |     |      *
 125 |     |      * - `spender` cannot be the zero address.
 126 |     |      */
 127 | *   |     function approve(address spender, uint256 value) public virtual returns (bool) {
 128 | *   |         address owner = _msgSender();
 129 | *   |         _approve(owner, spender, value);
 130 | *   |         return true;
 131 |     |     }
 132 |     | 
 133 |     |     /**
 134 |     |      * @dev See {IERC20-transferFrom}.
 135 |     |      *
 136 |     |      * Skips emitting an {Approval} event indicating an allowance update. This is not
 137 |     |      * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].
 138 |     |      *
 139 |     |      * NOTE: Does not update the allowance if the current allowance
 140 |     |      * is the maximum `uint256`.
 141 |     |      *
 142 |     |      * Requirements:
 143 |     |      *
 144 |     |      * - `from` and `to` cannot be the zero address.
 145 |     |      * - `from` must have a balance of at least `value`.
 146 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 147 |     |      * `value`.
 148 |     |      */
 149 | *   |     function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
 150 | *   |         address spender = _msgSender();
 151 | *   |         _spendAllowance(from, spender, value);
 152 | *   |         _transfer(from, to, value);
 153 | *   |         return true;
 154 |     |     }
 155 |     | 
 156 |     |     /**
 157 |     |      * @dev Moves a `value` amount of tokens from `from` to `to`.
 158 |     |      *
 159 |     |      * This internal function is equivalent to {transfer}, and can be used to
 160 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 161 |     |      *
 162 |     |      * Emits a {Transfer} event.
 163 |     |      *
 164 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 165 |     |      */
 166 | *   |     function _transfer(address from, address to, uint256 value) internal {
 167 | *   |         if (from == address(0)) {
 168 |     |             revert ERC20InvalidSender(address(0));
 169 |     |         }
 170 | *   |         if (to == address(0)) {
 171 | *   |             revert ERC20InvalidReceiver(address(0));
 172 |     |         }
 173 | *   |         _update(from, to, value);
 174 |     |     }
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
 178 |     |      * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
 179 |     |      * this function.
 180 |     |      *
 181 |     |      * Emits a {Transfer} event.
 182 |     |      */
 183 | *   |     function _update(address from, address to, uint256 value) internal virtual {
 184 | *   |         if (from == address(0)) {
 185 |     |             // Overflow check required: The rest of the code assumes that totalSupply never overflows
 186 | *   |             _totalSupply += value;
 187 | *   |         } else {
 188 | *   |             uint256 fromBalance = _balances[from];
 189 | *   |             if (fromBalance < value) {
 190 | *r  |                 revert ERC20InsufficientBalance(from, fromBalance, value);
 191 |     |             }
 192 |     |             unchecked {
 193 |     |                 // Overflow not possible: value <= fromBalance <= totalSupply.
 194 | *   |                 _balances[from] = fromBalance - value;
 195 |     |             }
 196 |     |         }
 197 |     | 
 198 | *   |         if (to == address(0)) {
 199 |     |             unchecked {
 200 |     |                 // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
 201 | *   |                 _totalSupply -= value;
 202 |     |             }
 203 |     |         } else {
 204 |     |             unchecked {
 205 |     |                 // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
 206 | *   |                 _balances[to] += value;
 207 |     |             }
 208 |     |         }
 209 |     | 
 210 | *   |         emit Transfer(from, to, value);
 211 |     |     }
 212 |     | 
 213 |     |     /**
 214 |     |      * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
 215 |     |      * Relies on the `_update` mechanism
 216 |     |      *
 217 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 218 |     |      *
 219 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 220 |     |      */
 221 | *   |     function _mint(address account, uint256 value) internal {
 222 | *   |         if (account == address(0)) {
 223 | *   |             revert ERC20InvalidReceiver(address(0));
 224 |     |         }
 225 | *   |         _update(address(0), account, value);
 226 |     |     }
 227 |     | 
 228 |     |     /**
 229 |     |      * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
 230 |     |      * Relies on the `_update` mechanism.
 231 |     |      *
 232 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 233 |     |      *
 234 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead
 235 |     |      */
 236 | *   |     function _burn(address account, uint256 value) internal {
 237 | *   |         if (account == address(0)) {
 238 |     |             revert ERC20InvalidSender(address(0));
 239 |     |         }
 240 | *   |         _update(account, address(0), value);
 241 |     |     }
 242 |     | 
 243 |     |     /**
 244 |     |      * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
 245 |     |      *
 246 |     |      * This internal function is equivalent to `approve`, and can be used to
 247 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 248 |     |      *
 249 |     |      * Emits an {Approval} event.
 250 |     |      *
 251 |     |      * Requirements:
 252 |     |      *
 253 |     |      * - `owner` cannot be the zero address.
 254 |     |      * - `spender` cannot be the zero address.
 255 |     |      *
 256 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 257 |     |      */
 258 | *   |     function _approve(address owner, address spender, uint256 value) internal {
 259 | *   |         _approve(owner, spender, value, true);
 260 |     |     }
 261 |     | 
 262 |     |     /**
 263 |     |      * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
 264 |     |      *
 265 |     |      * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
 266 |     |      * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
 267 |     |      * `Approval` event during `transferFrom` operations.
 268 |     |      *
 269 |     |      * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
 270 |     |      * true using the following override:
 271 |     |      *
 272 |     |      * ```solidity
 273 |     |      * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
 274 |     |      *     super._approve(owner, spender, value, true);
 275 |     |      * }
 276 |     |      * ```
 277 |     |      *
 278 |     |      * Requirements are the same as {_approve}.
 279 |     |      */
 280 | *   |     function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
 281 | *   |         if (owner == address(0)) {
 282 |     |             revert ERC20InvalidApprover(address(0));
 283 |     |         }
 284 | *   |         if (spender == address(0)) {
 285 | *r  |             revert ERC20InvalidSpender(address(0));
 286 |     |         }
 287 | *   |         _allowances[owner][spender] = value;
 288 | *   |         if (emitEvent) {
 289 | *   |             emit Approval(owner, spender, value);
 290 |     |         }
 291 |     |     }
 292 |     | 
 293 |     |     /**
 294 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `value`.
 295 |     |      *
 296 |     |      * Does not update the allowance value in case of infinite allowance.
 297 |     |      * Revert if not enough allowance is available.
 298 |     |      *
 299 |     |      * Does not emit an {Approval} event.
 300 |     |      */
 301 | *   |     function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
 302 | *   |         uint256 currentAllowance = allowance(owner, spender);
 303 | *   |         if (currentAllowance != type(uint256).max) {
 304 | *   |             if (currentAllowance < value) {
 305 | *r  |                 revert ERC20InsufficientAllowance(spender, currentAllowance, value);
 306 |     |             }
 307 |     |             unchecked {
 308 | *   |                 _approve(owner, spender, currentAllowance - value, false);
 309 |     |             }
 310 |     |         }
 311 |     |     }
 312 |     | }
 313 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC-20 standard as defined in the ERC.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the value of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the value of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 value) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 54 |     |      * caller's tokens.
 55 |     |      *
 56 |     |      * Returns a boolean value indicating whether the operation succeeded.
 57 |     |      *
 58 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 59 |     |      * that someone may use both the old and the new allowance by unfortunate
 60 |     |      * transaction ordering. One possible solution to mitigate this race
 61 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 62 |     |      * desired value afterwards:
 63 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 64 |     |      *
 65 |     |      * Emits an {Approval} event.
 66 |     |      */
 67 |     |     function approve(address spender, uint256 value) external returns (bool);
 68 |     | 
 69 |     |     /**
 70 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the
 71 |     |      * allowance mechanism. `value` is then deducted from the caller's
 72 |     |      * allowance.
 73 |     |      *
 74 |     |      * Returns a boolean value indicating whether the operation succeeded.
 75 |     |      *
 76 |     |      * Emits a {Transfer} event.
 77 |     |      */
 78 |     |     function transferFrom(address from, address to, uint256 value) external returns (bool);
 79 |     | }
 80 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {ERC20} from "../ERC20.sol";
  7 |     | import {Context} from "../../../utils/Context.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev Extension of {ERC20} that allows token holders to destroy both their own
 11 |     |  * tokens and those that they have an allowance for, in a way that can be
 12 |     |  * recognized off-chain (via event analysis).
 13 |     |  */
 14 |     | abstract contract ERC20Burnable is Context, ERC20 {
 15 |     |     /**
 16 |     |      * @dev Destroys a `value` amount of tokens from the caller.
 17 |     |      *
 18 |     |      * See {ERC20-_burn}.
 19 |     |      */
 20 | *   |     function burn(uint256 value) public virtual {
 21 | *   |         _burn(_msgSender(), value);
 22 |     |     }
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Destroys a `value` amount of tokens from `account`, deducting from
 26 |     |      * the caller's allowance.
 27 |     |      *
 28 |     |      * See {ERC20-_burn} and {ERC20-allowance}.
 29 |     |      *
 30 |     |      * Requirements:
 31 |     |      *
 32 |     |      * - the caller must have allowance for ``accounts``'s tokens of at least
 33 |     |      * `value`.
 34 |     |      */
 35 | *   |     function burnFrom(address account, uint256 value) public virtual {
 36 | *   |         _spendAllowance(account, _msgSender(), value);
 37 | *   |         _burn(account, value);
 38 |     |     }
 39 |     | }
 40 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Pausable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {ERC20} from "../ERC20.sol";
  7 |     | import {Pausable} from "../../../utils/Pausable.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev ERC-20 token with pausable token transfers, minting and burning.
 11 |     |  *
 12 |     |  * Useful for scenarios such as preventing trades until the end of an evaluation
 13 |     |  * period, or having an emergency switch for freezing all token transfers in the
 14 |     |  * event of a large bug.
 15 |     |  *
 16 |     |  * IMPORTANT: This contract does not include public pause and unpause functions. In
 17 |     |  * addition to inheriting this contract, you must define both functions, invoking the
 18 |     |  * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate
 19 |     |  * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will
 20 |     |  * make the contract pause mechanism of the contract unreachable, and thus unusable.
 21 |     |  */
 22 |     | abstract contract ERC20Pausable is ERC20, Pausable {
 23 |     |     /**
 24 |     |      * @dev See {ERC20-_update}.
 25 |     |      *
 26 |     |      * Requirements:
 27 |     |      *
 28 |     |      * - the contract must not be paused.
 29 |     |      */
 30 | *   |     function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {
 31 | *   |         super._update(from, to, value);
 32 |     |     }
 33 |     | }
 34 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20Permit} from "./IERC20Permit.sol";
  7 |     | import {ERC20} from "../ERC20.sol";
  8 |     | import {ECDSA} from "../../../utils/cryptography/ECDSA.sol";
  9 |     | import {EIP712} from "../../../utils/cryptography/EIP712.sol";
 10 |     | import {Nonces} from "../../../utils/Nonces.sol";
 11 |     | 
 12 |     | /**
 13 |     |  * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in
 14 |     |  * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].
 15 |     |  *
 16 |     |  * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by
 17 |     |  * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't
 18 |     |  * need to send a transaction, and thus is not required to hold Ether at all.
 19 |     |  */
 20 |     | abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {
 21 |     |     bytes32 private constant PERMIT_TYPEHASH =
 22 | *   |         keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Permit deadline has expired.
 26 |     |      */
 27 |     |     error ERC2612ExpiredSignature(uint256 deadline);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Mismatched signature.
 31 |     |      */
 32 |     |     error ERC2612InvalidSigner(address signer, address owner);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.
 36 |     |      *
 37 |     |      * It's a good idea to use the same `name` that is defined as the ERC-20 token name.
 38 |     |      */
 39 | *   |     constructor(string memory name) EIP712(name, "1") {}
 40 |     | 
 41 |     |     /**
 42 |     |      * @inheritdoc IERC20Permit
 43 |     |      */
 44 | *   |     function permit(
 45 |     |         address owner,
 46 |     |         address spender,
 47 |     |         uint256 value,
 48 |     |         uint256 deadline,
 49 |     |         uint8 v,
 50 |     |         bytes32 r,
 51 |     |         bytes32 s
 52 |     |     ) public virtual {
 53 | *   |         if (block.timestamp > deadline) {
 54 | *r  |             revert ERC2612ExpiredSignature(deadline);
 55 |     |         }
 56 |     | 
 57 | *   |         bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));
 58 |     | 
 59 | *   |         bytes32 hash = _hashTypedDataV4(structHash);
 60 |     | 
 61 | *   |         address signer = ECDSA.recover(hash, v, r, s);
 62 |     |         if (signer != owner) {
 63 |     |             revert ERC2612InvalidSigner(signer, owner);
 64 |     |         }
 65 |     | 
 66 |     |         _approve(owner, spender, value);
 67 |     |     }
 68 |     | 
 69 |     |     /**
 70 |     |      * @inheritdoc IERC20Permit
 71 |     |      */
 72 | *   |     function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {
 73 | *   |         return super.nonces(owner);
 74 |     |     }
 75 |     | 
 76 |     |     /**
 77 |     |      * @inheritdoc IERC20Permit
 78 |     |      */
 79 |     |     // solhint-disable-next-line func-name-mixedcase
 80 |     |     function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {
 81 |     |         return _domainSeparatorV4();
 82 |     |     }
 83 |     | }
 84 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20} from "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC-20 standard.
 10 |     |  */
 11 |     | interface IERC20Metadata is IERC20 {
 12 |     |     /**
 13 |     |      * @dev Returns the name of the token.
 14 |     |      */
 15 |     |     function name() external view returns (string memory);
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the symbol of the token.
 19 |     |      */
 20 |     |     function symbol() external view returns (string memory);
 21 |     | 
 22 |     |     /**
 23 |     |      * @dev Returns the decimals places of the token.
 24 |     |      */
 25 |     |     function decimals() external view returns (uint8);
 26 |     | }
 27 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in
  8 |     |  * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].
  9 |     |  *
 10 |     |  * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by
 11 |     |  * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 12 |     |  * need to send a transaction, and thus is not required to hold Ether at all.
 13 |     |  *
 14 |     |  * ==== Security Considerations
 15 |     |  *
 16 |     |  * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 17 |     |  * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 18 |     |  * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 19 |     |  * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 20 |     |  * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 21 |     |  * generally recommended is:
 22 |     |  *
 23 |     |  * ```solidity
 24 |     |  * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 25 |     |  *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 26 |     |  *     doThing(..., value);
 27 |     |  * }
 28 |     |  *
 29 |     |  * function doThing(..., uint256 value) public {
 30 |     |  *     token.safeTransferFrom(msg.sender, address(this), value);
 31 |     |  *     ...
 32 |     |  * }
 33 |     |  * ```
 34 |     |  *
 35 |     |  * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 36 |     |  * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 37 |     |  * {SafeERC20-safeTransferFrom}).
 38 |     |  *
 39 |     |  * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 40 |     |  * contracts should have entry points that don't rely on permit.
 41 |     |  */
 42 |     | interface IERC20Permit {
 43 |     |     /**
 44 |     |      * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
 45 |     |      * given ``owner``'s signed approval.
 46 |     |      *
 47 |     |      * IMPORTANT: The same issues {IERC20-approve} has related to transaction
 48 |     |      * ordering also apply here.
 49 |     |      *
 50 |     |      * Emits an {Approval} event.
 51 |     |      *
 52 |     |      * Requirements:
 53 |     |      *
 54 |     |      * - `spender` cannot be the zero address.
 55 |     |      * - `deadline` must be a timestamp in the future.
 56 |     |      * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
 57 |     |      * over the EIP712-formatted function arguments.
 58 |     |      * - the signature must use ``owner``'s current nonce (see {nonces}).
 59 |     |      *
 60 |     |      * For more information on the signature format, see the
 61 |     |      * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
 62 |     |      * section].
 63 |     |      *
 64 |     |      * CAUTION: See Security Considerations above.
 65 |     |      */
 66 |     |     function permit(
 67 |     |         address owner,
 68 |     |         address spender,
 69 |     |         uint256 value,
 70 |     |         uint256 deadline,
 71 |     |         uint8 v,
 72 |     |         bytes32 r,
 73 |     |         bytes32 s
 74 |     |     ) external;
 75 |     | 
 76 |     |     /**
 77 |     |      * @dev Returns the current nonce for `owner`. This value must be
 78 |     |      * included whenever a signature is generated for {permit}.
 79 |     |      *
 80 |     |      * Every successful call to {permit} increases ``owner``'s nonce by one. This
 81 |     |      * prevents a signature from being used multiple times.
 82 |     |      */
 83 |     |     function nonces(address owner) external view returns (uint256);
 84 |     | 
 85 |     |     /**
 86 |     |      * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
 87 |     |      */
 88 |     |     // solhint-disable-next-line func-name-mixedcase
 89 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 90 |     | }
 91 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 | *   |     function _msgSender() internal view virtual returns (address) {
 18 | *   |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | 
 25 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 26 |     |         return 0;
 27 |     |     }
 28 |     | }
 29 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/Nonces.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | /**
  6 |     |  * @dev Provides tracking nonces for addresses. Nonces will only increment.
  7 |     |  */
  8 |     | abstract contract Nonces {
  9 |     |     /**
 10 |     |      * @dev The nonce used for an `account` is not the expected current nonce.
 11 |     |      */
 12 |     |     error InvalidAccountNonce(address account, uint256 currentNonce);
 13 |     | 
 14 |     |     mapping(address account => uint256) private _nonces;
 15 |     | 
 16 |     |     /**
 17 |     |      * @dev Returns the next unused nonce for an address.
 18 |     |      */
 19 | *   |     function nonces(address owner) public view virtual returns (uint256) {
 20 | *   |         return _nonces[owner];
 21 |     |     }
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Consumes a nonce.
 25 |     |      *
 26 |     |      * Returns the current value and increments nonce.
 27 |     |      */
 28 | *   |     function _useNonce(address owner) internal virtual returns (uint256) {
 29 |     |         // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be
 30 |     |         // decremented or reset. This guarantees that the nonce never overflows.
 31 |     |         unchecked {
 32 |     |             // It is important to do x++ and not ++x here.
 33 | *   |             return _nonces[owner]++;
 34 |     |         }
 35 |     |     }
 36 |     | 
 37 |     |     /**
 38 |     |      * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.
 39 |     |      */
 40 |     |     function _useCheckedNonce(address owner, uint256 nonce) internal virtual {
 41 |     |         uint256 current = _useNonce(owner);
 42 |     |         if (nonce != current) {
 43 |     |             revert InvalidAccountNonce(owner, current);
 44 |     |         }
 45 |     |     }
 46 |     | }
 47 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/Panic.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Helper library for emitting standardized panic codes.
  8 |     |  *
  9 |     |  * ```solidity
 10 |     |  * contract Example {
 11 |     |  *      using Panic for uint256;
 12 |     |  *
 13 |     |  *      // Use any of the declared internal constants
 14 |     |  *      function foo() { Panic.GENERIC.panic(); }
 15 |     |  *
 16 |     |  *      // Alternatively
 17 |     |  *      function foo() { Panic.panic(Panic.GENERIC); }
 18 |     |  * }
 19 |     |  * ```
 20 |     |  *
 21 |     |  * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].
 22 |     |  *
 23 |     |  * _Available since v5.1._
 24 |     |  */
 25 |     | // slither-disable-next-line unused-state
 26 |     | library Panic {
 27 |     |     /// @dev generic / unspecified error
 28 |     |     uint256 internal constant GENERIC = 0x00;
 29 |     |     /// @dev used by the assert() builtin
 30 |     |     uint256 internal constant ASSERT = 0x01;
 31 |     |     /// @dev arithmetic underflow or overflow
 32 |     |     uint256 internal constant UNDER_OVERFLOW = 0x11;
 33 |     |     /// @dev division or modulo by zero
 34 |     |     uint256 internal constant DIVISION_BY_ZERO = 0x12;
 35 |     |     /// @dev enum conversion error
 36 |     |     uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;
 37 |     |     /// @dev invalid encoding in storage
 38 |     |     uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;
 39 |     |     /// @dev empty array pop
 40 |     |     uint256 internal constant EMPTY_ARRAY_POP = 0x31;
 41 |     |     /// @dev array out of bounds access
 42 |     |     uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;
 43 |     |     /// @dev resource error (too large allocation or too large array)
 44 |     |     uint256 internal constant RESOURCE_ERROR = 0x41;
 45 |     |     /// @dev calling invalid internal function
 46 |     |     uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;
 47 |     | 
 48 |     |     /// @dev Reverts with a panic code. Recommended to use with
 49 |     |     /// the internal constants with predefined codes.
 50 |     |     function panic(uint256 code) internal pure {
 51 |     |         assembly ("memory-safe") {
 52 |     |             mstore(0x00, 0x4e487b71)
 53 |     |             mstore(0x20, code)
 54 |     |             revert(0x1c, 0x24)
 55 |     |         }
 56 |     |     }
 57 |     | }
 58 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/Pausable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Context} from "../utils/Context.sol";
   7 |     | 
   8 |     | /**
   9 |     |  * @dev Contract module which allows children to implement an emergency stop
  10 |     |  * mechanism that can be triggered by an authorized account.
  11 |     |  *
  12 |     |  * This module is used through inheritance. It will make available the
  13 |     |  * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
  14 |     |  * the functions of your contract. Note that they will not be pausable by
  15 |     |  * simply including this module, only once the modifiers are put in place.
  16 |     |  */
  17 |     | abstract contract Pausable is Context {
  18 |     |     bool private _paused;
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev Emitted when the pause is triggered by `account`.
  22 |     |      */
  23 |     |     event Paused(address account);
  24 |     | 
  25 |     |     /**
  26 |     |      * @dev Emitted when the pause is lifted by `account`.
  27 |     |      */
  28 |     |     event Unpaused(address account);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev The operation failed because the contract is paused.
  32 |     |      */
  33 |     |     error EnforcedPause();
  34 |     | 
  35 |     |     /**
  36 |     |      * @dev The operation failed because the contract is not paused.
  37 |     |      */
  38 |     |     error ExpectedPause();
  39 |     | 
  40 |     |     /**
  41 |     |      * @dev Initializes the contract in unpaused state.
  42 |     |      */
  43 |     |     constructor() {
  44 | *   |         _paused = false;
  45 |     |     }
  46 |     | 
  47 |     |     /**
  48 |     |      * @dev Modifier to make a function callable only when the contract is not paused.
  49 |     |      *
  50 |     |      * Requirements:
  51 |     |      *
  52 |     |      * - The contract must not be paused.
  53 |     |      */
  54 |     |     modifier whenNotPaused() {
  55 | *   |         _requireNotPaused();
  56 |     |         _;
  57 |     |     }
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Modifier to make a function callable only when the contract is paused.
  61 |     |      *
  62 |     |      * Requirements:
  63 |     |      *
  64 |     |      * - The contract must be paused.
  65 |     |      */
  66 |     |     modifier whenPaused() {
  67 |     |         _requirePaused();
  68 |     |         _;
  69 |     |     }
  70 |     | 
  71 |     |     /**
  72 |     |      * @dev Returns true if the contract is paused, and false otherwise.
  73 |     |      */
  74 | *   |     function paused() public view virtual returns (bool) {
  75 | *   |         return _paused;
  76 |     |     }
  77 |     | 
  78 |     |     /**
  79 |     |      * @dev Throws if the contract is paused.
  80 |     |      */
  81 | *   |     function _requireNotPaused() internal view virtual {
  82 | *   |         if (paused()) {
  83 |     |             revert EnforcedPause();
  84 |     |         }
  85 |     |     }
  86 |     | 
  87 |     |     /**
  88 |     |      * @dev Throws if the contract is not paused.
  89 |     |      */
  90 |     |     function _requirePaused() internal view virtual {
  91 |     |         if (!paused()) {
  92 |     |             revert ExpectedPause();
  93 |     |         }
  94 |     |     }
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Triggers stopped state.
  98 |     |      *
  99 |     |      * Requirements:
 100 |     |      *
 101 |     |      * - The contract must not be paused.
 102 |     |      */
 103 |     |     function _pause() internal virtual whenNotPaused {
 104 |     |         _paused = true;
 105 |     |         emit Paused(_msgSender());
 106 |     |     }
 107 |     | 
 108 |     |     /**
 109 |     |      * @dev Returns to normal state.
 110 |     |      *
 111 |     |      * Requirements:
 112 |     |      *
 113 |     |      * - The contract must be paused.
 114 |     |      */
 115 |     |     function _unpause() internal virtual whenPaused {
 116 |     |         _paused = false;
 117 |     |         emit Unpaused(_msgSender());
 118 |     |     }
 119 |     | }
 120 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {StorageSlot} from "./StorageSlot.sol";
   7 |     | 
   8 |     | // | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |
   9 |     | // | length  | 0x                                                              BB |
  10 |     | type ShortString is bytes32;
  11 |     | 
  12 |     | /**
  13 |     |  * @dev This library provides functions to convert short memory strings
  14 |     |  * into a `ShortString` type that can be used as an immutable variable.
  15 |     |  *
  16 |     |  * Strings of arbitrary length can be optimized using this library if
  17 |     |  * they are short enough (up to 31 bytes) by packing them with their
  18 |     |  * length (1 byte) in a single EVM word (32 bytes). Additionally, a
  19 |     |  * fallback mechanism can be used for every other case.
  20 |     |  *
  21 |     |  * Usage example:
  22 |     |  *
  23 |     |  * ```solidity
  24 |     |  * contract Named {
  25 |     |  *     using ShortStrings for *;
  26 |     |  *
  27 |     |  *     ShortString private immutable _name;
  28 |     |  *     string private _nameFallback;
  29 |     |  *
  30 |     |  *     constructor(string memory contractName) {
  31 |     |  *         _name = contractName.toShortStringWithFallback(_nameFallback);
  32 |     |  *     }
  33 |     |  *
  34 |     |  *     function name() external view returns (string memory) {
  35 |     |  *         return _name.toStringWithFallback(_nameFallback);
  36 |     |  *     }
  37 |     |  * }
  38 |     |  * ```
  39 |     |  */
  40 |     | library ShortStrings {
  41 |     |     // Used as an identifier for strings longer than 31 bytes.
  42 | *   |     bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;
  43 |     | 
  44 |     |     error StringTooLong(string str);
  45 |     |     error InvalidShortString();
  46 |     | 
  47 |     |     /**
  48 |     |      * @dev Encode a string of at most 31 chars into a `ShortString`.
  49 |     |      *
  50 |     |      * This will trigger a `StringTooLong` error is the input string is too long.
  51 |     |      */
  52 | *   |     function toShortString(string memory str) internal pure returns (ShortString) {
  53 | *   |         bytes memory bstr = bytes(str);
  54 | *   |         if (bstr.length > 31) {
  55 |     |             revert StringTooLong(str);
  56 |     |         }
  57 | *   |         return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Decode a `ShortString` back to a "normal" string.
  62 |     |      */
  63 | *   |     function toString(ShortString sstr) internal pure returns (string memory) {
  64 | *   |         uint256 len = byteLength(sstr);
  65 |     |         // using `new string(len)` would work locally but is not memory safe.
  66 | *   |         string memory str = new string(32);
  67 |     |         assembly ("memory-safe") {
  68 | *   |             mstore(str, len)
  69 | *   |             mstore(add(str, 0x20), sstr)
  70 |     |         }
  71 | *   |         return str;
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @dev Return the length of a `ShortString`.
  76 |     |      */
  77 | *   |     function byteLength(ShortString sstr) internal pure returns (uint256) {
  78 | *   |         uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;
  79 | *   |         if (result > 31) {
  80 |     |             revert InvalidShortString();
  81 |     |         }
  82 | *   |         return result;
  83 |     |     }
  84 |     | 
  85 |     |     /**
  86 |     |      * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.
  87 |     |      */
  88 | *   |     function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {
  89 | *   |         if (bytes(value).length < 32) {
  90 | *   |             return toShortString(value);
  91 |     |         } else {
  92 |     |             StorageSlot.getStringSlot(store).value = value;
  93 |     |             return ShortString.wrap(FALLBACK_SENTINEL);
  94 |     |         }
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
  99 |     |      */
 100 | *   |     function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {
 101 | *   |         if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
 102 | *   |             return toString(value);
 103 |     |         } else {
 104 |     |             return store;
 105 |     |         }
 106 |     |     }
 107 |     | 
 108 |     |     /**
 109 |     |      * @dev Return the length of a string that was encoded to `ShortString` or written to storage using
 110 |     |      * {setWithFallback}.
 111 |     |      *
 112 |     |      * WARNING: This will return the "byte length" of the string. This may not reflect the actual length in terms of
 113 |     |      * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.
 114 |     |      */
 115 |     |     function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {
 116 |     |         if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
 117 |     |             return byteLength(value);
 118 |     |         } else {
 119 |     |             return bytes(store).length;
 120 |     |         }
 121 |     |     }
 122 |     | }
 123 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)
   3 |     | // This file was procedurally generated from scripts/generate/templates/StorageSlot.js.
   4 |     | 
   5 |     | pragma solidity ^0.8.20;
   6 |     | 
   7 |     | /**
   8 |     |  * @dev Library for reading and writing primitive types to specific storage slots.
   9 |     |  *
  10 |     |  * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
  11 |     |  * This library helps with reading and writing to such slots without the need for inline assembly.
  12 |     |  *
  13 |     |  * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
  14 |     |  *
  15 |     |  * Example usage to set ERC-1967 implementation slot:
  16 |     |  * ```solidity
  17 |     |  * contract ERC1967 {
  18 |     |  *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.
  19 |     |  *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
  20 |     |  *
  21 |     |  *     function _getImplementation() internal view returns (address) {
  22 |     |  *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
  23 |     |  *     }
  24 |     |  *
  25 |     |  *     function _setImplementation(address newImplementation) internal {
  26 |     |  *         require(newImplementation.code.length > 0);
  27 |     |  *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
  28 |     |  *     }
  29 |     |  * }
  30 |     |  * ```
  31 |     |  *
  32 |     |  * TIP: Consider using this library along with {SlotDerivation}.
  33 |     |  */
  34 |     | library StorageSlot {
  35 |     |     struct AddressSlot {
  36 |     |         address value;
  37 |     |     }
  38 |     | 
  39 |     |     struct BooleanSlot {
  40 |     |         bool value;
  41 |     |     }
  42 |     | 
  43 |     |     struct Bytes32Slot {
  44 |     |         bytes32 value;
  45 |     |     }
  46 |     | 
  47 |     |     struct Uint256Slot {
  48 |     |         uint256 value;
  49 |     |     }
  50 |     | 
  51 |     |     struct Int256Slot {
  52 |     |         int256 value;
  53 |     |     }
  54 |     | 
  55 |     |     struct StringSlot {
  56 |     |         string value;
  57 |     |     }
  58 |     | 
  59 |     |     struct BytesSlot {
  60 |     |         bytes value;
  61 |     |     }
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Returns an `AddressSlot` with member `value` located at `slot`.
  65 |     |      */
  66 |     |     function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
  67 |     |         assembly ("memory-safe") {
  68 |     |             r.slot := slot
  69 |     |         }
  70 |     |     }
  71 |     | 
  72 |     |     /**
  73 |     |      * @dev Returns a `BooleanSlot` with member `value` located at `slot`.
  74 |     |      */
  75 |     |     function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
  76 |     |         assembly ("memory-safe") {
  77 |     |             r.slot := slot
  78 |     |         }
  79 |     |     }
  80 |     | 
  81 |     |     /**
  82 |     |      * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.
  83 |     |      */
  84 |     |     function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
  85 |     |         assembly ("memory-safe") {
  86 |     |             r.slot := slot
  87 |     |         }
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Returns a `Uint256Slot` with member `value` located at `slot`.
  92 |     |      */
  93 |     |     function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
  94 |     |         assembly ("memory-safe") {
  95 |     |             r.slot := slot
  96 |     |         }
  97 |     |     }
  98 |     | 
  99 |     |     /**
 100 |     |      * @dev Returns a `Int256Slot` with member `value` located at `slot`.
 101 |     |      */
 102 |     |     function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {
 103 |     |         assembly ("memory-safe") {
 104 |     |             r.slot := slot
 105 |     |         }
 106 |     |     }
 107 |     | 
 108 |     |     /**
 109 |     |      * @dev Returns a `StringSlot` with member `value` located at `slot`.
 110 |     |      */
 111 |     |     function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
 112 |     |         assembly ("memory-safe") {
 113 |     |             r.slot := slot
 114 |     |         }
 115 |     |     }
 116 |     | 
 117 |     |     /**
 118 |     |      * @dev Returns an `StringSlot` representation of the string storage pointer `store`.
 119 |     |      */
 120 |     |     function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
 121 |     |         assembly ("memory-safe") {
 122 |     |             r.slot := store.slot
 123 |     |         }
 124 |     |     }
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev Returns a `BytesSlot` with member `value` located at `slot`.
 128 |     |      */
 129 |     |     function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
 130 |     |         assembly ("memory-safe") {
 131 |     |             r.slot := slot
 132 |     |         }
 133 |     |     }
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
 137 |     |      */
 138 |     |     function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
 139 |     |         assembly ("memory-safe") {
 140 |     |             r.slot := store.slot
 141 |     |         }
 142 |     |     }
 143 |     | }
 144 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/Strings.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Math} from "./math/Math.sol";
   7 |     | import {SignedMath} from "./math/SignedMath.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev String operations.
  11 |     |  */
  12 |     | library Strings {
  13 |     |     bytes16 private constant HEX_DIGITS = "0123456789abcdef";
  14 |     |     uint8 private constant ADDRESS_LENGTH = 20;
  15 |     | 
  16 |     |     /**
  17 |     |      * @dev The `value` string doesn't fit in the specified `length`.
  18 |     |      */
  19 |     |     error StringsInsufficientHexLength(uint256 value, uint256 length);
  20 |     | 
  21 |     |     /**
  22 |     |      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
  23 |     |      */
  24 |     |     function toString(uint256 value) internal pure returns (string memory) {
  25 |     |         unchecked {
  26 |     |             uint256 length = Math.log10(value) + 1;
  27 |     |             string memory buffer = new string(length);
  28 |     |             uint256 ptr;
  29 |     |             assembly ("memory-safe") {
  30 |     |                 ptr := add(buffer, add(32, length))
  31 |     |             }
  32 |     |             while (true) {
  33 |     |                 ptr--;
  34 |     |                 assembly ("memory-safe") {
  35 |     |                     mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
  36 |     |                 }
  37 |     |                 value /= 10;
  38 |     |                 if (value == 0) break;
  39 |     |             }
  40 |     |             return buffer;
  41 |     |         }
  42 |     |     }
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Converts a `int256` to its ASCII `string` decimal representation.
  46 |     |      */
  47 |     |     function toStringSigned(int256 value) internal pure returns (string memory) {
  48 |     |         return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));
  49 |     |     }
  50 |     | 
  51 |     |     /**
  52 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
  53 |     |      */
  54 |     |     function toHexString(uint256 value) internal pure returns (string memory) {
  55 |     |         unchecked {
  56 |     |             return toHexString(value, Math.log256(value) + 1);
  57 |     |         }
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
  62 |     |      */
  63 |     |     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
  64 |     |         uint256 localValue = value;
  65 |     |         bytes memory buffer = new bytes(2 * length + 2);
  66 |     |         buffer[0] = "0";
  67 |     |         buffer[1] = "x";
  68 |     |         for (uint256 i = 2 * length + 1; i > 1; --i) {
  69 |     |             buffer[i] = HEX_DIGITS[localValue & 0xf];
  70 |     |             localValue >>= 4;
  71 |     |         }
  72 |     |         if (localValue != 0) {
  73 |     |             revert StringsInsufficientHexLength(value, length);
  74 |     |         }
  75 |     |         return string(buffer);
  76 |     |     }
  77 |     | 
  78 |     |     /**
  79 |     |      * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal
  80 |     |      * representation.
  81 |     |      */
  82 |     |     function toHexString(address addr) internal pure returns (string memory) {
  83 |     |         return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
  84 |     |     }
  85 |     | 
  86 |     |     /**
  87 |     |      * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal
  88 |     |      * representation, according to EIP-55.
  89 |     |      */
  90 |     |     function toChecksumHexString(address addr) internal pure returns (string memory) {
  91 |     |         bytes memory buffer = bytes(toHexString(addr));
  92 |     | 
  93 |     |         // hash the hex part of buffer (skip length + 2 bytes, length 40)
  94 |     |         uint256 hashValue;
  95 |     |         assembly ("memory-safe") {
  96 |     |             hashValue := shr(96, keccak256(add(buffer, 0x22), 40))
  97 |     |         }
  98 |     | 
  99 |     |         for (uint256 i = 41; i > 1; --i) {
 100 |     |             // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)
 101 |     |             if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {
 102 |     |                 // case shift by xoring with 0x20
 103 |     |                 buffer[i] ^= 0x20;
 104 |     |             }
 105 |     |             hashValue >>= 4;
 106 |     |         }
 107 |     |         return string(buffer);
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Returns true if the two strings are equal.
 112 |     |      */
 113 |     |     function equal(string memory a, string memory b) internal pure returns (bool) {
 114 |     |         return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));
 115 |     |     }
 116 |     | }
 117 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
   8 |     |  *
   9 |     |  * These functions can be used to verify that a message was signed by the holder
  10 |     |  * of the private keys of a given address.
  11 |     |  */
  12 |     | library ECDSA {
  13 |     |     enum RecoverError {
  14 |     |         NoError,
  15 |     |         InvalidSignature,
  16 |     |         InvalidSignatureLength,
  17 |     |         InvalidSignatureS
  18 |     |     }
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev The signature derives the `address(0)`.
  22 |     |      */
  23 |     |     error ECDSAInvalidSignature();
  24 |     | 
  25 |     |     /**
  26 |     |      * @dev The signature has an invalid length.
  27 |     |      */
  28 |     |     error ECDSAInvalidSignatureLength(uint256 length);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev The signature has an S value that is in the upper half order.
  32 |     |      */
  33 |     |     error ECDSAInvalidSignatureS(bytes32 s);
  34 |     | 
  35 |     |     /**
  36 |     |      * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not
  37 |     |      * return address(0) without also returning an error description. Errors are documented using an enum (error type)
  38 |     |      * and a bytes32 providing additional information about the error.
  39 |     |      *
  40 |     |      * If no error is returned, then the address can be used for verification purposes.
  41 |     |      *
  42 |     |      * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
  43 |     |      * this function rejects them by requiring the `s` value to be in the lower
  44 |     |      * half order, and the `v` value to be either 27 or 28.
  45 |     |      *
  46 |     |      * IMPORTANT: `hash` _must_ be the result of a hash operation for the
  47 |     |      * verification to be secure: it is possible to craft signatures that
  48 |     |      * recover to arbitrary addresses for non-hashed data. A safe way to ensure
  49 |     |      * this is by receiving a hash of the original message (which may otherwise
  50 |     |      * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
  51 |     |      *
  52 |     |      * Documentation for signature generation:
  53 |     |      * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
  54 |     |      * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
  55 |     |      */
  56 |     |     function tryRecover(
  57 |     |         bytes32 hash,
  58 |     |         bytes memory signature
  59 |     |     ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {
  60 |     |         if (signature.length == 65) {
  61 |     |             bytes32 r;
  62 |     |             bytes32 s;
  63 |     |             uint8 v;
  64 |     |             // ecrecover takes the signature parameters, and the only way to get them
  65 |     |             // currently is to use assembly.
  66 |     |             assembly ("memory-safe") {
  67 |     |                 r := mload(add(signature, 0x20))
  68 |     |                 s := mload(add(signature, 0x40))
  69 |     |                 v := byte(0, mload(add(signature, 0x60)))
  70 |     |             }
  71 |     |             return tryRecover(hash, v, r, s);
  72 |     |         } else {
  73 |     |             return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));
  74 |     |         }
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Returns the address that signed a hashed message (`hash`) with
  79 |     |      * `signature`. This address can then be used for verification purposes.
  80 |     |      *
  81 |     |      * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
  82 |     |      * this function rejects them by requiring the `s` value to be in the lower
  83 |     |      * half order, and the `v` value to be either 27 or 28.
  84 |     |      *
  85 |     |      * IMPORTANT: `hash` _must_ be the result of a hash operation for the
  86 |     |      * verification to be secure: it is possible to craft signatures that
  87 |     |      * recover to arbitrary addresses for non-hashed data. A safe way to ensure
  88 |     |      * this is by receiving a hash of the original message (which may otherwise
  89 |     |      * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
  90 |     |      */
  91 |     |     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
  92 |     |         (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
  93 |     |         _throwError(error, errorArg);
  94 |     |         return recovered;
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
  99 |     |      *
 100 |     |      * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]
 101 |     |      */
 102 |     |     function tryRecover(
 103 |     |         bytes32 hash,
 104 |     |         bytes32 r,
 105 |     |         bytes32 vs
 106 |     |     ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {
 107 |     |         unchecked {
 108 |     |             bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
 109 |     |             // We do not check for an overflow here since the shift operation results in 0 or 1.
 110 |     |             uint8 v = uint8((uint256(vs) >> 255) + 27);
 111 |     |             return tryRecover(hash, v, r, s);
 112 |     |         }
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
 117 |     |      */
 118 |     |     function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
 119 |     |         (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
 120 |     |         _throwError(error, errorArg);
 121 |     |         return recovered;
 122 |     |     }
 123 |     | 
 124 |     |     /**
 125 |     |      * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
 126 |     |      * `r` and `s` signature fields separately.
 127 |     |      */
 128 | *   |     function tryRecover(
 129 |     |         bytes32 hash,
 130 |     |         uint8 v,
 131 |     |         bytes32 r,
 132 |     |         bytes32 s
 133 | *   |     ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {
 134 |     |         // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
 135 |     |         // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
 136 |     |         // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
 137 |     |         // signatures from current libraries generate a unique signature with an s-value in the lower half order.
 138 |     |         //
 139 |     |         // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
 140 |     |         // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
 141 |     |         // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
 142 |     |         // these malleable signatures as well.
 143 | *   |         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
 144 | *   |             return (address(0), RecoverError.InvalidSignatureS, s);
 145 |     |         }
 146 |     | 
 147 |     |         // If the signature is valid (and not malleable), return the signer address
 148 | *   |         address signer = ecrecover(hash, v, r, s);
 149 | *   |         if (signer == address(0)) {
 150 | *   |             return (address(0), RecoverError.InvalidSignature, bytes32(0));
 151 |     |         }
 152 |     | 
 153 |     |         return (signer, RecoverError.NoError, bytes32(0));
 154 |     |     }
 155 |     | 
 156 |     |     /**
 157 |     |      * @dev Overload of {ECDSA-recover} that receives the `v`,
 158 |     |      * `r` and `s` signature fields separately.
 159 |     |      */
 160 | *   |     function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
 161 | *   |         (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);
 162 | *   |         _throwError(error, errorArg);
 163 |     |         return recovered;
 164 |     |     }
 165 |     | 
 166 |     |     /**
 167 |     |      * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.
 168 |     |      */
 169 | *   |     function _throwError(RecoverError error, bytes32 errorArg) private pure {
 170 | *   |         if (error == RecoverError.NoError) {
 171 | *   |             return; // no error: do nothing
 172 | *   |         } else if (error == RecoverError.InvalidSignature) {
 173 | *r  |             revert ECDSAInvalidSignature();
 174 | *   |         } else if (error == RecoverError.InvalidSignatureLength) {
 175 |     |             revert ECDSAInvalidSignatureLength(uint256(errorArg));
 176 | *   |         } else if (error == RecoverError.InvalidSignatureS) {
 177 | *r  |             revert ECDSAInvalidSignatureS(errorArg);
 178 |     |         }
 179 |     |     }
 180 |     | }
 181 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {MessageHashUtils} from "./MessageHashUtils.sol";
   7 |     | import {ShortStrings, ShortString} from "../ShortStrings.sol";
   8 |     | import {IERC5267} from "../../interfaces/IERC5267.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.
  12 |     |  *
  13 |     |  * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose
  14 |     |  * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract
  15 |     |  * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to
  16 |     |  * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.
  17 |     |  *
  18 |     |  * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
  19 |     |  * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
  20 |     |  * ({_hashTypedDataV4}).
  21 |     |  *
  22 |     |  * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
  23 |     |  * the chain id to protect against replay attacks on an eventual fork of the chain.
  24 |     |  *
  25 |     |  * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
  26 |     |  * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
  27 |     |  *
  28 |     |  * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain
  29 |     |  * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the
  30 |     |  * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.
  31 |     |  *
  32 |     |  * @custom:oz-upgrades-unsafe-allow state-variable-immutable
  33 |     |  */
  34 |     | abstract contract EIP712 is IERC5267 {
  35 |     |     using ShortStrings for *;
  36 |     | 
  37 |     |     bytes32 private constant TYPE_HASH =
  38 | *   |         keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
  39 |     | 
  40 |     |     // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
  41 |     |     // invalidate the cached domain separator if the chain id changes.
  42 |     |     bytes32 private immutable _cachedDomainSeparator;
  43 |     |     uint256 private immutable _cachedChainId;
  44 |     |     address private immutable _cachedThis;
  45 |     | 
  46 |     |     bytes32 private immutable _hashedName;
  47 |     |     bytes32 private immutable _hashedVersion;
  48 |     | 
  49 |     |     ShortString private immutable _name;
  50 |     |     ShortString private immutable _version;
  51 |     |     string private _nameFallback;
  52 |     |     string private _versionFallback;
  53 |     | 
  54 |     |     /**
  55 |     |      * @dev Initializes the domain separator and parameter caches.
  56 |     |      *
  57 |     |      * The meaning of `name` and `version` is specified in
  58 |     |      * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:
  59 |     |      *
  60 |     |      * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
  61 |     |      * - `version`: the current major version of the signing domain.
  62 |     |      *
  63 |     |      * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
  64 |     |      * contract upgrade].
  65 |     |      */
  66 | *   |     constructor(string memory name, string memory version) {
  67 | *   |         _name = name.toShortStringWithFallback(_nameFallback);
  68 | *   |         _version = version.toShortStringWithFallback(_versionFallback);
  69 | *   |         _hashedName = keccak256(bytes(name));
  70 | *   |         _hashedVersion = keccak256(bytes(version));
  71 |     | 
  72 | *   |         _cachedChainId = block.chainid;
  73 | *   |         _cachedDomainSeparator = _buildDomainSeparator();
  74 | *   |         _cachedThis = address(this);
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Returns the domain separator for the current chain.
  79 |     |      */
  80 | *   |     function _domainSeparatorV4() internal view returns (bytes32) {
  81 | *   |         if (address(this) == _cachedThis && block.chainid == _cachedChainId) {
  82 | *   |             return _cachedDomainSeparator;
  83 |     |         } else {
  84 |     |             return _buildDomainSeparator();
  85 |     |         }
  86 |     |     }
  87 |     | 
  88 | *   |     function _buildDomainSeparator() private view returns (bytes32) {
  89 | *   |         return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
  94 |     |      * function returns the hash of the fully encoded EIP712 message for this domain.
  95 |     |      *
  96 |     |      * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
  97 |     |      *
  98 |     |      * ```solidity
  99 |     |      * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
 100 |     |      *     keccak256("Mail(address to,string contents)"),
 101 |     |      *     mailTo,
 102 |     |      *     keccak256(bytes(mailContents))
 103 |     |      * )));
 104 |     |      * address signer = ECDSA.recover(digest, signature);
 105 |     |      * ```
 106 |     |      */
 107 | *   |     function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
 108 | *   |         return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);
 109 |     |     }
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev See {IERC-5267}.
 113 |     |      */
 114 | *   |     function eip712Domain()
 115 |     |         public
 116 |     |         view
 117 |     |         virtual
 118 |     |         returns (
 119 | *   |             bytes1 fields,
 120 | *   |             string memory name,
 121 | *   |             string memory version,
 122 | *   |             uint256 chainId,
 123 | *   |             address verifyingContract,
 124 | *   |             bytes32 salt,
 125 | *   |             uint256[] memory extensions
 126 |     |         )
 127 |     |     {
 128 | *   |         return (
 129 |     |             hex"0f", // 01111
 130 | *   |             _EIP712Name(),
 131 | *   |             _EIP712Version(),
 132 | *   |             block.chainid,
 133 | *   |             address(this),
 134 | *   |             bytes32(0),
 135 | *   |             new uint256[](0)
 136 |     |         );
 137 |     |     }
 138 |     | 
 139 |     |     /**
 140 |     |      * @dev The name parameter for the EIP712 domain.
 141 |     |      *
 142 |     |      * NOTE: By default this function reads _name which is an immutable value.
 143 |     |      * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
 144 |     |      */
 145 |     |     // solhint-disable-next-line func-name-mixedcase
 146 | *   |     function _EIP712Name() internal view returns (string memory) {
 147 | *   |         return _name.toStringWithFallback(_nameFallback);
 148 |     |     }
 149 |     | 
 150 |     |     /**
 151 |     |      * @dev The version parameter for the EIP712 domain.
 152 |     |      *
 153 |     |      * NOTE: By default this function reads _version which is an immutable value.
 154 |     |      * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
 155 |     |      */
 156 |     |     // solhint-disable-next-line func-name-mixedcase
 157 | *   |     function _EIP712Version() internal view returns (string memory) {
 158 | *   |         return _version.toStringWithFallback(_versionFallback);
 159 |     |     }
 160 |     | }
 161 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {Strings} from "../Strings.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.
 10 |     |  *
 11 |     |  * The library provides methods for generating a hash of a message that conforms to the
 12 |     |  * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]
 13 |     |  * specifications.
 14 |     |  */
 15 |     | library MessageHashUtils {
 16 |     |     /**
 17 |     |      * @dev Returns the keccak256 digest of an ERC-191 signed data with version
 18 |     |      * `0x45` (`personal_sign` messages).
 19 |     |      *
 20 |     |      * The digest is calculated by prefixing a bytes32 `messageHash` with
 21 |     |      * `"\x19Ethereum Signed Message:\n32"` and hashing the result. It corresponds with the
 22 |     |      * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
 23 |     |      *
 24 |     |      * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with
 25 |     |      * keccak256, although any bytes32 value can be safely used because the final digest will
 26 |     |      * be re-hashed.
 27 |     |      *
 28 |     |      * See {ECDSA-recover}.
 29 |     |      */
 30 |     |     function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {
 31 |     |         assembly ("memory-safe") {
 32 |     |             mstore(0x00, "\x19Ethereum Signed Message:\n32") // 32 is the bytes-length of messageHash
 33 |     |             mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix
 34 |     |             digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)
 35 |     |         }
 36 |     |     }
 37 |     | 
 38 |     |     /**
 39 |     |      * @dev Returns the keccak256 digest of an ERC-191 signed data with version
 40 |     |      * `0x45` (`personal_sign` messages).
 41 |     |      *
 42 |     |      * The digest is calculated by prefixing an arbitrary `message` with
 43 |     |      * `"\x19Ethereum Signed Message:\n" + len(message)` and hashing the result. It corresponds with the
 44 |     |      * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
 45 |     |      *
 46 |     |      * See {ECDSA-recover}.
 47 |     |      */
 48 |     |     function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {
 49 |     |         return
 50 |     |             keccak256(bytes.concat("\x19Ethereum Signed Message:\n", bytes(Strings.toString(message.length)), message));
 51 |     |     }
 52 |     | 
 53 |     |     /**
 54 |     |      * @dev Returns the keccak256 digest of an ERC-191 signed data with version
 55 |     |      * `0x00` (data with intended validator).
 56 |     |      *
 57 |     |      * The digest is calculated by prefixing an arbitrary `data` with `"\x19\x00"` and the intended
 58 |     |      * `validator` address. Then hashing the result.
 59 |     |      *
 60 |     |      * See {ECDSA-recover}.
 61 |     |      */
 62 |     |     function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
 63 |     |         return keccak256(abi.encodePacked(hex"19_00", validator, data));
 64 |     |     }
 65 |     | 
 66 |     |     /**
 67 |     |      * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).
 68 |     |      *
 69 |     |      * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with
 70 |     |      * `\x19\x01` and hashing the result. It corresponds to the hash signed by the
 71 |     |      * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.
 72 |     |      *
 73 |     |      * See {ECDSA-recover}.
 74 |     |      */
 75 | *   |     function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {
 76 | *   |         assembly ("memory-safe") {
 77 | *   |             let ptr := mload(0x40)
 78 | *   |             mstore(ptr, hex"19_01")
 79 | *   |             mstore(add(ptr, 0x02), domainSeparator)
 80 | *   |             mstore(add(ptr, 0x22), structHash)
 81 | *   |             digest := keccak256(ptr, 0x42)
 82 |     |         }
 83 |     |     }
 84 |     | }
 85 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/math/Math.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {Panic} from "../Panic.sol";
   7 |     | import {SafeCast} from "./SafeCast.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev Standard math utilities missing in the Solidity language.
  11 |     |  */
  12 |     | library Math {
  13 |     |     enum Rounding {
  14 |     |         Floor, // Toward negative infinity
  15 |     |         Ceil, // Toward positive infinity
  16 |     |         Trunc, // Toward zero
  17 |     |         Expand // Away from zero
  18 |     |     }
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).
  22 |     |      */
  23 |     |     function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  24 |     |         unchecked {
  25 |     |             uint256 c = a + b;
  26 |     |             if (c < a) return (false, 0);
  27 |     |             return (true, c);
  28 |     |         }
  29 |     |     }
  30 |     | 
  31 |     |     /**
  32 |     |      * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).
  33 |     |      */
  34 |     |     function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  35 |     |         unchecked {
  36 |     |             if (b > a) return (false, 0);
  37 |     |             return (true, a - b);
  38 |     |         }
  39 |     |     }
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).
  43 |     |      */
  44 |     |     function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  45 |     |         unchecked {
  46 |     |             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
  47 |     |             // benefit is lost if 'b' is also tested.
  48 |     |             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
  49 |     |             if (a == 0) return (true, 0);
  50 |     |             uint256 c = a * b;
  51 |     |             if (c / a != b) return (false, 0);
  52 |     |             return (true, c);
  53 |     |         }
  54 |     |     }
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).
  58 |     |      */
  59 |     |     function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  60 |     |         unchecked {
  61 |     |             if (b == 0) return (false, 0);
  62 |     |             return (true, a / b);
  63 |     |         }
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).
  68 |     |      */
  69 |     |     function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
  70 |     |         unchecked {
  71 |     |             if (b == 0) return (false, 0);
  72 |     |             return (true, a % b);
  73 |     |         }
  74 |     |     }
  75 |     | 
  76 |     |     /**
  77 |     |      * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.
  78 |     |      *
  79 |     |      * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
  80 |     |      * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute
  81 |     |      * one branch when needed, making this function more expensive.
  82 |     |      */
  83 |     |     function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {
  84 |     |         unchecked {
  85 |     |             // branchless ternary works because:
  86 |     |             // b ^ (a ^ b) == a
  87 |     |             // b ^ 0 == b
  88 |     |             return b ^ ((a ^ b) * SafeCast.toUint(condition));
  89 |     |         }
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @dev Returns the largest of two numbers.
  94 |     |      */
  95 |     |     function max(uint256 a, uint256 b) internal pure returns (uint256) {
  96 |     |         return ternary(a > b, a, b);
  97 |     |     }
  98 |     | 
  99 |     |     /**
 100 |     |      * @dev Returns the smallest of two numbers.
 101 |     |      */
 102 |     |     function min(uint256 a, uint256 b) internal pure returns (uint256) {
 103 |     |         return ternary(a < b, a, b);
 104 |     |     }
 105 |     | 
 106 |     |     /**
 107 |     |      * @dev Returns the average of two numbers. The result is rounded towards
 108 |     |      * zero.
 109 |     |      */
 110 |     |     function average(uint256 a, uint256 b) internal pure returns (uint256) {
 111 |     |         // (a + b) / 2 can overflow.
 112 |     |         return (a & b) + (a ^ b) / 2;
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev Returns the ceiling of the division of two numbers.
 117 |     |      *
 118 |     |      * This differs from standard division with `/` in that it rounds towards infinity instead
 119 |     |      * of rounding towards zero.
 120 |     |      */
 121 |     |     function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
 122 |     |         if (b == 0) {
 123 |     |             // Guarantee the same behavior as in a regular Solidity division.
 124 |     |             Panic.panic(Panic.DIVISION_BY_ZERO);
 125 |     |         }
 126 |     | 
 127 |     |         // The following calculation ensures accurate ceiling division without overflow.
 128 |     |         // Since a is non-zero, (a - 1) / b will not overflow.
 129 |     |         // The largest possible result occurs when (a - 1) / b is type(uint256).max,
 130 |     |         // but the largest value we can obtain is type(uint256).max - 1, which happens
 131 |     |         // when a = type(uint256).max and b = 1.
 132 |     |         unchecked {
 133 |     |             return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);
 134 |     |         }
 135 |     |     }
 136 |     | 
 137 |     |     /**
 138 |     |      * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
 139 |     |      * denominator == 0.
 140 |     |      *
 141 |     |      * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
 142 |     |      * Uniswap Labs also under MIT license.
 143 |     |      */
 144 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
 145 |     |         unchecked {
 146 |     |             // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use
 147 |     |             // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
 148 |     |             // variables such that product = prod1 * 2²⁵⁶ + prod0.
 149 |     |             uint256 prod0 = x * y; // Least significant 256 bits of the product
 150 |     |             uint256 prod1; // Most significant 256 bits of the product
 151 |     |             assembly {
 152 |     |                 let mm := mulmod(x, y, not(0))
 153 |     |                 prod1 := sub(sub(mm, prod0), lt(mm, prod0))
 154 |     |             }
 155 |     | 
 156 |     |             // Handle non-overflow cases, 256 by 256 division.
 157 |     |             if (prod1 == 0) {
 158 |     |                 // Solidity will revert if denominator == 0, unlike the div opcode on its own.
 159 |     |                 // The surrounding unchecked block does not change this fact.
 160 |     |                 // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
 161 |     |                 return prod0 / denominator;
 162 |     |             }
 163 |     | 
 164 |     |             // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.
 165 |     |             if (denominator <= prod1) {
 166 |     |                 Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));
 167 |     |             }
 168 |     | 
 169 |     |             ///////////////////////////////////////////////
 170 |     |             // 512 by 256 division.
 171 |     |             ///////////////////////////////////////////////
 172 |     | 
 173 |     |             // Make division exact by subtracting the remainder from [prod1 prod0].
 174 |     |             uint256 remainder;
 175 |     |             assembly {
 176 |     |                 // Compute remainder using mulmod.
 177 |     |                 remainder := mulmod(x, y, denominator)
 178 |     | 
 179 |     |                 // Subtract 256 bit number from 512 bit number.
 180 |     |                 prod1 := sub(prod1, gt(remainder, prod0))
 181 |     |                 prod0 := sub(prod0, remainder)
 182 |     |             }
 183 |     | 
 184 |     |             // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
 185 |     |             // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.
 186 |     | 
 187 |     |             uint256 twos = denominator & (0 - denominator);
 188 |     |             assembly {
 189 |     |                 // Divide denominator by twos.
 190 |     |                 denominator := div(denominator, twos)
 191 |     | 
 192 |     |                 // Divide [prod1 prod0] by twos.
 193 |     |                 prod0 := div(prod0, twos)
 194 |     | 
 195 |     |                 // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.
 196 |     |                 twos := add(div(sub(0, twos), twos), 1)
 197 |     |             }
 198 |     | 
 199 |     |             // Shift in bits from prod1 into prod0.
 200 |     |             prod0 |= prod1 * twos;
 201 |     | 
 202 |     |             // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such
 203 |     |             // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for
 204 |     |             // four bits. That is, denominator * inv ≡ 1 mod 2⁴.
 205 |     |             uint256 inverse = (3 * denominator) ^ 2;
 206 |     | 
 207 |     |             // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
 208 |     |             // works in modular arithmetic, doubling the correct bits in each step.
 209 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2⁸
 210 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶
 211 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2³²
 212 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴
 213 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸
 214 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶
 215 |     | 
 216 |     |             // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
 217 |     |             // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is
 218 |     |             // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1
 219 |     |             // is no longer required.
 220 |     |             result = prod0 * inverse;
 221 |     |             return result;
 222 |     |         }
 223 |     |     }
 224 |     | 
 225 |     |     /**
 226 |     |      * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.
 227 |     |      */
 228 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
 229 |     |         return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);
 230 |     |     }
 231 |     | 
 232 |     |     /**
 233 |     |      * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.
 234 |     |      *
 235 |     |      * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.
 236 |     |      * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.
 237 |     |      *
 238 |     |      * If the input value is not inversible, 0 is returned.
 239 |     |      *
 240 |     |      * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the
 241 |     |      * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.
 242 |     |      */
 243 |     |     function invMod(uint256 a, uint256 n) internal pure returns (uint256) {
 244 |     |         unchecked {
 245 |     |             if (n == 0) return 0;
 246 |     | 
 247 |     |             // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)
 248 |     |             // Used to compute integers x and y such that: ax + ny = gcd(a, n).
 249 |     |             // When the gcd is 1, then the inverse of a modulo n exists and it's x.
 250 |     |             // ax + ny = 1
 251 |     |             // ax = 1 + (-y)n
 252 |     |             // ax ≡ 1 (mod n) # x is the inverse of a modulo n
 253 |     | 
 254 |     |             // If the remainder is 0 the gcd is n right away.
 255 |     |             uint256 remainder = a % n;
 256 |     |             uint256 gcd = n;
 257 |     | 
 258 |     |             // Therefore the initial coefficients are:
 259 |     |             // ax + ny = gcd(a, n) = n
 260 |     |             // 0a + 1n = n
 261 |     |             int256 x = 0;
 262 |     |             int256 y = 1;
 263 |     | 
 264 |     |             while (remainder != 0) {
 265 |     |                 uint256 quotient = gcd / remainder;
 266 |     | 
 267 |     |                 (gcd, remainder) = (
 268 |     |                     // The old remainder is the next gcd to try.
 269 |     |                     remainder,
 270 |     |                     // Compute the next remainder.
 271 |     |                     // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd
 272 |     |                     // where gcd is at most n (capped to type(uint256).max)
 273 |     |                     gcd - remainder * quotient
 274 |     |                 );
 275 |     | 
 276 |     |                 (x, y) = (
 277 |     |                     // Increment the coefficient of a.
 278 |     |                     y,
 279 |     |                     // Decrement the coefficient of n.
 280 |     |                     // Can overflow, but the result is casted to uint256 so that the
 281 |     |                     // next value of y is "wrapped around" to a value between 0 and n - 1.
 282 |     |                     x - y * int256(quotient)
 283 |     |                 );
 284 |     |             }
 285 |     | 
 286 |     |             if (gcd != 1) return 0; // No inverse exists.
 287 |     |             return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.
 288 |     |         }
 289 |     |     }
 290 |     | 
 291 |     |     /**
 292 |     |      * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.
 293 |     |      *
 294 |     |      * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is
 295 |     |      * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that
 296 |     |      * `a**(p-2)` is the modular multiplicative inverse of a in Fp.
 297 |     |      *
 298 |     |      * NOTE: this function does NOT check that `p` is a prime greater than `2`.
 299 |     |      */
 300 |     |     function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {
 301 |     |         unchecked {
 302 |     |             return Math.modExp(a, p - 2, p);
 303 |     |         }
 304 |     |     }
 305 |     | 
 306 |     |     /**
 307 |     |      * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)
 308 |     |      *
 309 |     |      * Requirements:
 310 |     |      * - modulus can't be zero
 311 |     |      * - underlying staticcall to precompile must succeed
 312 |     |      *
 313 |     |      * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make
 314 |     |      * sure the chain you're using it on supports the precompiled contract for modular exponentiation
 315 |     |      * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,
 316 |     |      * the underlying function will succeed given the lack of a revert, but the result may be incorrectly
 317 |     |      * interpreted as 0.
 318 |     |      */
 319 |     |     function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {
 320 |     |         (bool success, uint256 result) = tryModExp(b, e, m);
 321 |     |         if (!success) {
 322 |     |             Panic.panic(Panic.DIVISION_BY_ZERO);
 323 |     |         }
 324 |     |         return result;
 325 |     |     }
 326 |     | 
 327 |     |     /**
 328 |     |      * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).
 329 |     |      * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying
 330 |     |      * to operate modulo 0 or if the underlying precompile reverted.
 331 |     |      *
 332 |     |      * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain
 333 |     |      * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in
 334 |     |      * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack
 335 |     |      * of a revert, but the result may be incorrectly interpreted as 0.
 336 |     |      */
 337 |     |     function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {
 338 |     |         if (m == 0) return (false, 0);
 339 |     |         assembly ("memory-safe") {
 340 |     |             let ptr := mload(0x40)
 341 |     |             // | Offset    | Content    | Content (Hex)                                                      |
 342 |     |             // |-----------|------------|--------------------------------------------------------------------|
 343 |     |             // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
 344 |     |             // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
 345 |     |             // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
 346 |     |             // | 0x60:0x7f | value of b | 0x<.............................................................b> |
 347 |     |             // | 0x80:0x9f | value of e | 0x<.............................................................e> |
 348 |     |             // | 0xa0:0xbf | value of m | 0x<.............................................................m> |
 349 |     |             mstore(ptr, 0x20)
 350 |     |             mstore(add(ptr, 0x20), 0x20)
 351 |     |             mstore(add(ptr, 0x40), 0x20)
 352 |     |             mstore(add(ptr, 0x60), b)
 353 |     |             mstore(add(ptr, 0x80), e)
 354 |     |             mstore(add(ptr, 0xa0), m)
 355 |     | 
 356 |     |             // Given the result < m, it's guaranteed to fit in 32 bytes,
 357 |     |             // so we can use the memory scratch space located at offset 0.
 358 |     |             success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)
 359 |     |             result := mload(0x00)
 360 |     |         }
 361 |     |     }
 362 |     | 
 363 |     |     /**
 364 |     |      * @dev Variant of {modExp} that supports inputs of arbitrary length.
 365 |     |      */
 366 |     |     function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {
 367 |     |         (bool success, bytes memory result) = tryModExp(b, e, m);
 368 |     |         if (!success) {
 369 |     |             Panic.panic(Panic.DIVISION_BY_ZERO);
 370 |     |         }
 371 |     |         return result;
 372 |     |     }
 373 |     | 
 374 |     |     /**
 375 |     |      * @dev Variant of {tryModExp} that supports inputs of arbitrary length.
 376 |     |      */
 377 |     |     function tryModExp(
 378 |     |         bytes memory b,
 379 |     |         bytes memory e,
 380 |     |         bytes memory m
 381 |     |     ) internal view returns (bool success, bytes memory result) {
 382 |     |         if (_zeroBytes(m)) return (false, new bytes(0));
 383 |     | 
 384 |     |         uint256 mLen = m.length;
 385 |     | 
 386 |     |         // Encode call args in result and move the free memory pointer
 387 |     |         result = abi.encodePacked(b.length, e.length, mLen, b, e, m);
 388 |     | 
 389 |     |         assembly ("memory-safe") {
 390 |     |             let dataPtr := add(result, 0x20)
 391 |     |             // Write result on top of args to avoid allocating extra memory.
 392 |     |             success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)
 393 |     |             // Overwrite the length.
 394 |     |             // result.length > returndatasize() is guaranteed because returndatasize() == m.length
 395 |     |             mstore(result, mLen)
 396 |     |             // Set the memory pointer after the returned data.
 397 |     |             mstore(0x40, add(dataPtr, mLen))
 398 |     |         }
 399 |     |     }
 400 |     | 
 401 |     |     /**
 402 |     |      * @dev Returns whether the provided byte array is zero.
 403 |     |      */
 404 |     |     function _zeroBytes(bytes memory byteArray) private pure returns (bool) {
 405 |     |         for (uint256 i = 0; i < byteArray.length; ++i) {
 406 |     |             if (byteArray[i] != 0) {
 407 |     |                 return false;
 408 |     |             }
 409 |     |         }
 410 |     |         return true;
 411 |     |     }
 412 |     | 
 413 |     |     /**
 414 |     |      * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
 415 |     |      * towards zero.
 416 |     |      *
 417 |     |      * This method is based on Newton's method for computing square roots; the algorithm is restricted to only
 418 |     |      * using integer operations.
 419 |     |      */
 420 |     |     function sqrt(uint256 a) internal pure returns (uint256) {
 421 |     |         unchecked {
 422 |     |             // Take care of easy edge cases when a == 0 or a == 1
 423 |     |             if (a <= 1) {
 424 |     |                 return a;
 425 |     |             }
 426 |     | 
 427 |     |             // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a
 428 |     |             // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between
 429 |     |             // the current value as `ε_n = | x_n - sqrt(a) |`.
 430 |     |             //
 431 |     |             // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root
 432 |     |             // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is
 433 |     |             // bigger than any uint256.
 434 |     |             //
 435 |     |             // By noticing that
 436 |     |             // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`
 437 |     |             // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar
 438 |     |             // to the msb function.
 439 |     |             uint256 aa = a;
 440 |     |             uint256 xn = 1;
 441 |     | 
 442 |     |             if (aa >= (1 << 128)) {
 443 |     |                 aa >>= 128;
 444 |     |                 xn <<= 64;
 445 |     |             }
 446 |     |             if (aa >= (1 << 64)) {
 447 |     |                 aa >>= 64;
 448 |     |                 xn <<= 32;
 449 |     |             }
 450 |     |             if (aa >= (1 << 32)) {
 451 |     |                 aa >>= 32;
 452 |     |                 xn <<= 16;
 453 |     |             }
 454 |     |             if (aa >= (1 << 16)) {
 455 |     |                 aa >>= 16;
 456 |     |                 xn <<= 8;
 457 |     |             }
 458 |     |             if (aa >= (1 << 8)) {
 459 |     |                 aa >>= 8;
 460 |     |                 xn <<= 4;
 461 |     |             }
 462 |     |             if (aa >= (1 << 4)) {
 463 |     |                 aa >>= 4;
 464 |     |                 xn <<= 2;
 465 |     |             }
 466 |     |             if (aa >= (1 << 2)) {
 467 |     |                 xn <<= 1;
 468 |     |             }
 469 |     | 
 470 |     |             // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).
 471 |     |             //
 472 |     |             // We can refine our estimation by noticing that the middle of that interval minimizes the error.
 473 |     |             // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).
 474 |     |             // This is going to be our x_0 (and ε_0)
 475 |     |             xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)
 476 |     | 
 477 |     |             // From here, Newton's method give us:
 478 |     |             // x_{n+1} = (x_n + a / x_n) / 2
 479 |     |             //
 480 |     |             // One should note that:
 481 |     |             // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a
 482 |     |             //              = ((x_n² + a) / (2 * x_n))² - a
 483 |     |             //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a
 484 |     |             //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)
 485 |     |             //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)
 486 |     |             //              = (x_n² - a)² / (2 * x_n)²
 487 |     |             //              = ((x_n² - a) / (2 * x_n))²
 488 |     |             //              ≥ 0
 489 |     |             // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n
 490 |     |             //
 491 |     |             // This gives us the proof of quadratic convergence of the sequence:
 492 |     |             // ε_{n+1} = | x_{n+1} - sqrt(a) |
 493 |     |             //         = | (x_n + a / x_n) / 2 - sqrt(a) |
 494 |     |             //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |
 495 |     |             //         = | (x_n - sqrt(a))² / (2 * x_n) |
 496 |     |             //         = | ε_n² / (2 * x_n) |
 497 |     |             //         = ε_n² / | (2 * x_n) |
 498 |     |             //
 499 |     |             // For the first iteration, we have a special case where x_0 is known:
 500 |     |             // ε_1 = ε_0² / | (2 * x_0) |
 501 |     |             //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))
 502 |     |             //     ≤ 2**(2*e-4) / (3 * 2**(e-1))
 503 |     |             //     ≤ 2**(e-3) / 3
 504 |     |             //     ≤ 2**(e-3-log2(3))
 505 |     |             //     ≤ 2**(e-4.5)
 506 |     |             //
 507 |     |             // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:
 508 |     |             // ε_{n+1} = ε_n² / | (2 * x_n) |
 509 |     |             //         ≤ (2**(e-k))² / (2 * 2**(e-1))
 510 |     |             //         ≤ 2**(2*e-2*k) / 2**e
 511 |     |             //         ≤ 2**(e-2*k)
 512 |     |             xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above
 513 |     |             xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5
 514 |     |             xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9
 515 |     |             xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18
 516 |     |             xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36
 517 |     |             xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72
 518 |     | 
 519 |     |             // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision
 520 |     |             // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either
 521 |     |             // sqrt(a) or sqrt(a) + 1.
 522 |     |             return xn - SafeCast.toUint(xn > a / xn);
 523 |     |         }
 524 |     |     }
 525 |     | 
 526 |     |     /**
 527 |     |      * @dev Calculates sqrt(a), following the selected rounding direction.
 528 |     |      */
 529 |     |     function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
 530 |     |         unchecked {
 531 |     |             uint256 result = sqrt(a);
 532 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);
 533 |     |         }
 534 |     |     }
 535 |     | 
 536 |     |     /**
 537 |     |      * @dev Return the log in base 2 of a positive value rounded towards zero.
 538 |     |      * Returns 0 if given 0.
 539 |     |      */
 540 |     |     function log2(uint256 value) internal pure returns (uint256) {
 541 |     |         uint256 result = 0;
 542 |     |         uint256 exp;
 543 |     |         unchecked {
 544 |     |             exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);
 545 |     |             value >>= exp;
 546 |     |             result += exp;
 547 |     | 
 548 |     |             exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);
 549 |     |             value >>= exp;
 550 |     |             result += exp;
 551 |     | 
 552 |     |             exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);
 553 |     |             value >>= exp;
 554 |     |             result += exp;
 555 |     | 
 556 |     |             exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);
 557 |     |             value >>= exp;
 558 |     |             result += exp;
 559 |     | 
 560 |     |             exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);
 561 |     |             value >>= exp;
 562 |     |             result += exp;
 563 |     | 
 564 |     |             exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);
 565 |     |             value >>= exp;
 566 |     |             result += exp;
 567 |     | 
 568 |     |             exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);
 569 |     |             value >>= exp;
 570 |     |             result += exp;
 571 |     | 
 572 |     |             result += SafeCast.toUint(value > 1);
 573 |     |         }
 574 |     |         return result;
 575 |     |     }
 576 |     | 
 577 |     |     /**
 578 |     |      * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
 579 |     |      * Returns 0 if given 0.
 580 |     |      */
 581 |     |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
 582 |     |         unchecked {
 583 |     |             uint256 result = log2(value);
 584 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);
 585 |     |         }
 586 |     |     }
 587 |     | 
 588 |     |     /**
 589 |     |      * @dev Return the log in base 10 of a positive value rounded towards zero.
 590 |     |      * Returns 0 if given 0.
 591 |     |      */
 592 |     |     function log10(uint256 value) internal pure returns (uint256) {
 593 |     |         uint256 result = 0;
 594 |     |         unchecked {
 595 |     |             if (value >= 10 ** 64) {
 596 |     |                 value /= 10 ** 64;
 597 |     |                 result += 64;
 598 |     |             }
 599 |     |             if (value >= 10 ** 32) {
 600 |     |                 value /= 10 ** 32;
 601 |     |                 result += 32;
 602 |     |             }
 603 |     |             if (value >= 10 ** 16) {
 604 |     |                 value /= 10 ** 16;
 605 |     |                 result += 16;
 606 |     |             }
 607 |     |             if (value >= 10 ** 8) {
 608 |     |                 value /= 10 ** 8;
 609 |     |                 result += 8;
 610 |     |             }
 611 |     |             if (value >= 10 ** 4) {
 612 |     |                 value /= 10 ** 4;
 613 |     |                 result += 4;
 614 |     |             }
 615 |     |             if (value >= 10 ** 2) {
 616 |     |                 value /= 10 ** 2;
 617 |     |                 result += 2;
 618 |     |             }
 619 |     |             if (value >= 10 ** 1) {
 620 |     |                 result += 1;
 621 |     |             }
 622 |     |         }
 623 |     |         return result;
 624 |     |     }
 625 |     | 
 626 |     |     /**
 627 |     |      * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
 628 |     |      * Returns 0 if given 0.
 629 |     |      */
 630 |     |     function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
 631 |     |         unchecked {
 632 |     |             uint256 result = log10(value);
 633 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);
 634 |     |         }
 635 |     |     }
 636 |     | 
 637 |     |     /**
 638 |     |      * @dev Return the log in base 256 of a positive value rounded towards zero.
 639 |     |      * Returns 0 if given 0.
 640 |     |      *
 641 |     |      * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
 642 |     |      */
 643 |     |     function log256(uint256 value) internal pure returns (uint256) {
 644 |     |         uint256 result = 0;
 645 |     |         uint256 isGt;
 646 |     |         unchecked {
 647 |     |             isGt = SafeCast.toUint(value > (1 << 128) - 1);
 648 |     |             value >>= isGt * 128;
 649 |     |             result += isGt * 16;
 650 |     | 
 651 |     |             isGt = SafeCast.toUint(value > (1 << 64) - 1);
 652 |     |             value >>= isGt * 64;
 653 |     |             result += isGt * 8;
 654 |     | 
 655 |     |             isGt = SafeCast.toUint(value > (1 << 32) - 1);
 656 |     |             value >>= isGt * 32;
 657 |     |             result += isGt * 4;
 658 |     | 
 659 |     |             isGt = SafeCast.toUint(value > (1 << 16) - 1);
 660 |     |             value >>= isGt * 16;
 661 |     |             result += isGt * 2;
 662 |     | 
 663 |     |             result += SafeCast.toUint(value > (1 << 8) - 1);
 664 |     |         }
 665 |     |         return result;
 666 |     |     }
 667 |     | 
 668 |     |     /**
 669 |     |      * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
 670 |     |      * Returns 0 if given 0.
 671 |     |      */
 672 |     |     function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
 673 |     |         unchecked {
 674 |     |             uint256 result = log256(value);
 675 |     |             return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);
 676 |     |         }
 677 |     |     }
 678 |     | 
 679 |     |     /**
 680 |     |      * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
 681 |     |      */
 682 |     |     function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
 683 |     |         return uint8(rounding) % 2 == 1;
 684 |     |     }
 685 |     | }
 686 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol
    1 |     | // SPDX-License-Identifier: MIT
    2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)
    3 |     | // This file was procedurally generated from scripts/generate/templates/SafeCast.js.
    4 |     | 
    5 |     | pragma solidity ^0.8.20;
    6 |     | 
    7 |     | /**
    8 |     |  * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
    9 |     |  * checks.
   10 |     |  *
   11 |     |  * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
   12 |     |  * easily result in undesired exploitation or bugs, since developers usually
   13 |     |  * assume that overflows raise errors. `SafeCast` restores this intuition by
   14 |     |  * reverting the transaction when such an operation overflows.
   15 |     |  *
   16 |     |  * Using this library instead of the unchecked operations eliminates an entire
   17 |     |  * class of bugs, so it's recommended to use it always.
   18 |     |  */
   19 |     | library SafeCast {
   20 |     |     /**
   21 |     |      * @dev Value doesn't fit in an uint of `bits` size.
   22 |     |      */
   23 |     |     error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
   24 |     | 
   25 |     |     /**
   26 |     |      * @dev An int value doesn't fit in an uint of `bits` size.
   27 |     |      */
   28 |     |     error SafeCastOverflowedIntToUint(int256 value);
   29 |     | 
   30 |     |     /**
   31 |     |      * @dev Value doesn't fit in an int of `bits` size.
   32 |     |      */
   33 |     |     error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);
   34 |     | 
   35 |     |     /**
   36 |     |      * @dev An uint value doesn't fit in an int of `bits` size.
   37 |     |      */
   38 |     |     error SafeCastOverflowedUintToInt(uint256 value);
   39 |     | 
   40 |     |     /**
   41 |     |      * @dev Returns the downcasted uint248 from uint256, reverting on
   42 |     |      * overflow (when the input is greater than largest uint248).
   43 |     |      *
   44 |     |      * Counterpart to Solidity's `uint248` operator.
   45 |     |      *
   46 |     |      * Requirements:
   47 |     |      *
   48 |     |      * - input must fit into 248 bits
   49 |     |      */
   50 |     |     function toUint248(uint256 value) internal pure returns (uint248) {
   51 |     |         if (value > type(uint248).max) {
   52 |     |             revert SafeCastOverflowedUintDowncast(248, value);
   53 |     |         }
   54 |     |         return uint248(value);
   55 |     |     }
   56 |     | 
   57 |     |     /**
   58 |     |      * @dev Returns the downcasted uint240 from uint256, reverting on
   59 |     |      * overflow (when the input is greater than largest uint240).
   60 |     |      *
   61 |     |      * Counterpart to Solidity's `uint240` operator.
   62 |     |      *
   63 |     |      * Requirements:
   64 |     |      *
   65 |     |      * - input must fit into 240 bits
   66 |     |      */
   67 |     |     function toUint240(uint256 value) internal pure returns (uint240) {
   68 |     |         if (value > type(uint240).max) {
   69 |     |             revert SafeCastOverflowedUintDowncast(240, value);
   70 |     |         }
   71 |     |         return uint240(value);
   72 |     |     }
   73 |     | 
   74 |     |     /**
   75 |     |      * @dev Returns the downcasted uint232 from uint256, reverting on
   76 |     |      * overflow (when the input is greater than largest uint232).
   77 |     |      *
   78 |     |      * Counterpart to Solidity's `uint232` operator.
   79 |     |      *
   80 |     |      * Requirements:
   81 |     |      *
   82 |     |      * - input must fit into 232 bits
   83 |     |      */
   84 |     |     function toUint232(uint256 value) internal pure returns (uint232) {
   85 |     |         if (value > type(uint232).max) {
   86 |     |             revert SafeCastOverflowedUintDowncast(232, value);
   87 |     |         }
   88 |     |         return uint232(value);
   89 |     |     }
   90 |     | 
   91 |     |     /**
   92 |     |      * @dev Returns the downcasted uint224 from uint256, reverting on
   93 |     |      * overflow (when the input is greater than largest uint224).
   94 |     |      *
   95 |     |      * Counterpart to Solidity's `uint224` operator.
   96 |     |      *
   97 |     |      * Requirements:
   98 |     |      *
   99 |     |      * - input must fit into 224 bits
  100 |     |      */
  101 |     |     function toUint224(uint256 value) internal pure returns (uint224) {
  102 |     |         if (value > type(uint224).max) {
  103 |     |             revert SafeCastOverflowedUintDowncast(224, value);
  104 |     |         }
  105 |     |         return uint224(value);
  106 |     |     }
  107 |     | 
  108 |     |     /**
  109 |     |      * @dev Returns the downcasted uint216 from uint256, reverting on
  110 |     |      * overflow (when the input is greater than largest uint216).
  111 |     |      *
  112 |     |      * Counterpart to Solidity's `uint216` operator.
  113 |     |      *
  114 |     |      * Requirements:
  115 |     |      *
  116 |     |      * - input must fit into 216 bits
  117 |     |      */
  118 |     |     function toUint216(uint256 value) internal pure returns (uint216) {
  119 |     |         if (value > type(uint216).max) {
  120 |     |             revert SafeCastOverflowedUintDowncast(216, value);
  121 |     |         }
  122 |     |         return uint216(value);
  123 |     |     }
  124 |     | 
  125 |     |     /**
  126 |     |      * @dev Returns the downcasted uint208 from uint256, reverting on
  127 |     |      * overflow (when the input is greater than largest uint208).
  128 |     |      *
  129 |     |      * Counterpart to Solidity's `uint208` operator.
  130 |     |      *
  131 |     |      * Requirements:
  132 |     |      *
  133 |     |      * - input must fit into 208 bits
  134 |     |      */
  135 |     |     function toUint208(uint256 value) internal pure returns (uint208) {
  136 |     |         if (value > type(uint208).max) {
  137 |     |             revert SafeCastOverflowedUintDowncast(208, value);
  138 |     |         }
  139 |     |         return uint208(value);
  140 |     |     }
  141 |     | 
  142 |     |     /**
  143 |     |      * @dev Returns the downcasted uint200 from uint256, reverting on
  144 |     |      * overflow (when the input is greater than largest uint200).
  145 |     |      *
  146 |     |      * Counterpart to Solidity's `uint200` operator.
  147 |     |      *
  148 |     |      * Requirements:
  149 |     |      *
  150 |     |      * - input must fit into 200 bits
  151 |     |      */
  152 |     |     function toUint200(uint256 value) internal pure returns (uint200) {
  153 |     |         if (value > type(uint200).max) {
  154 |     |             revert SafeCastOverflowedUintDowncast(200, value);
  155 |     |         }
  156 |     |         return uint200(value);
  157 |     |     }
  158 |     | 
  159 |     |     /**
  160 |     |      * @dev Returns the downcasted uint192 from uint256, reverting on
  161 |     |      * overflow (when the input is greater than largest uint192).
  162 |     |      *
  163 |     |      * Counterpart to Solidity's `uint192` operator.
  164 |     |      *
  165 |     |      * Requirements:
  166 |     |      *
  167 |     |      * - input must fit into 192 bits
  168 |     |      */
  169 |     |     function toUint192(uint256 value) internal pure returns (uint192) {
  170 |     |         if (value > type(uint192).max) {
  171 |     |             revert SafeCastOverflowedUintDowncast(192, value);
  172 |     |         }
  173 |     |         return uint192(value);
  174 |     |     }
  175 |     | 
  176 |     |     /**
  177 |     |      * @dev Returns the downcasted uint184 from uint256, reverting on
  178 |     |      * overflow (when the input is greater than largest uint184).
  179 |     |      *
  180 |     |      * Counterpart to Solidity's `uint184` operator.
  181 |     |      *
  182 |     |      * Requirements:
  183 |     |      *
  184 |     |      * - input must fit into 184 bits
  185 |     |      */
  186 |     |     function toUint184(uint256 value) internal pure returns (uint184) {
  187 |     |         if (value > type(uint184).max) {
  188 |     |             revert SafeCastOverflowedUintDowncast(184, value);
  189 |     |         }
  190 |     |         return uint184(value);
  191 |     |     }
  192 |     | 
  193 |     |     /**
  194 |     |      * @dev Returns the downcasted uint176 from uint256, reverting on
  195 |     |      * overflow (when the input is greater than largest uint176).
  196 |     |      *
  197 |     |      * Counterpart to Solidity's `uint176` operator.
  198 |     |      *
  199 |     |      * Requirements:
  200 |     |      *
  201 |     |      * - input must fit into 176 bits
  202 |     |      */
  203 |     |     function toUint176(uint256 value) internal pure returns (uint176) {
  204 |     |         if (value > type(uint176).max) {
  205 |     |             revert SafeCastOverflowedUintDowncast(176, value);
  206 |     |         }
  207 |     |         return uint176(value);
  208 |     |     }
  209 |     | 
  210 |     |     /**
  211 |     |      * @dev Returns the downcasted uint168 from uint256, reverting on
  212 |     |      * overflow (when the input is greater than largest uint168).
  213 |     |      *
  214 |     |      * Counterpart to Solidity's `uint168` operator.
  215 |     |      *
  216 |     |      * Requirements:
  217 |     |      *
  218 |     |      * - input must fit into 168 bits
  219 |     |      */
  220 |     |     function toUint168(uint256 value) internal pure returns (uint168) {
  221 |     |         if (value > type(uint168).max) {
  222 |     |             revert SafeCastOverflowedUintDowncast(168, value);
  223 |     |         }
  224 |     |         return uint168(value);
  225 |     |     }
  226 |     | 
  227 |     |     /**
  228 |     |      * @dev Returns the downcasted uint160 from uint256, reverting on
  229 |     |      * overflow (when the input is greater than largest uint160).
  230 |     |      *
  231 |     |      * Counterpart to Solidity's `uint160` operator.
  232 |     |      *
  233 |     |      * Requirements:
  234 |     |      *
  235 |     |      * - input must fit into 160 bits
  236 |     |      */
  237 |     |     function toUint160(uint256 value) internal pure returns (uint160) {
  238 |     |         if (value > type(uint160).max) {
  239 |     |             revert SafeCastOverflowedUintDowncast(160, value);
  240 |     |         }
  241 |     |         return uint160(value);
  242 |     |     }
  243 |     | 
  244 |     |     /**
  245 |     |      * @dev Returns the downcasted uint152 from uint256, reverting on
  246 |     |      * overflow (when the input is greater than largest uint152).
  247 |     |      *
  248 |     |      * Counterpart to Solidity's `uint152` operator.
  249 |     |      *
  250 |     |      * Requirements:
  251 |     |      *
  252 |     |      * - input must fit into 152 bits
  253 |     |      */
  254 |     |     function toUint152(uint256 value) internal pure returns (uint152) {
  255 |     |         if (value > type(uint152).max) {
  256 |     |             revert SafeCastOverflowedUintDowncast(152, value);
  257 |     |         }
  258 |     |         return uint152(value);
  259 |     |     }
  260 |     | 
  261 |     |     /**
  262 |     |      * @dev Returns the downcasted uint144 from uint256, reverting on
  263 |     |      * overflow (when the input is greater than largest uint144).
  264 |     |      *
  265 |     |      * Counterpart to Solidity's `uint144` operator.
  266 |     |      *
  267 |     |      * Requirements:
  268 |     |      *
  269 |     |      * - input must fit into 144 bits
  270 |     |      */
  271 |     |     function toUint144(uint256 value) internal pure returns (uint144) {
  272 |     |         if (value > type(uint144).max) {
  273 |     |             revert SafeCastOverflowedUintDowncast(144, value);
  274 |     |         }
  275 |     |         return uint144(value);
  276 |     |     }
  277 |     | 
  278 |     |     /**
  279 |     |      * @dev Returns the downcasted uint136 from uint256, reverting on
  280 |     |      * overflow (when the input is greater than largest uint136).
  281 |     |      *
  282 |     |      * Counterpart to Solidity's `uint136` operator.
  283 |     |      *
  284 |     |      * Requirements:
  285 |     |      *
  286 |     |      * - input must fit into 136 bits
  287 |     |      */
  288 |     |     function toUint136(uint256 value) internal pure returns (uint136) {
  289 |     |         if (value > type(uint136).max) {
  290 |     |             revert SafeCastOverflowedUintDowncast(136, value);
  291 |     |         }
  292 |     |         return uint136(value);
  293 |     |     }
  294 |     | 
  295 |     |     /**
  296 |     |      * @dev Returns the downcasted uint128 from uint256, reverting on
  297 |     |      * overflow (when the input is greater than largest uint128).
  298 |     |      *
  299 |     |      * Counterpart to Solidity's `uint128` operator.
  300 |     |      *
  301 |     |      * Requirements:
  302 |     |      *
  303 |     |      * - input must fit into 128 bits
  304 |     |      */
  305 |     |     function toUint128(uint256 value) internal pure returns (uint128) {
  306 |     |         if (value > type(uint128).max) {
  307 |     |             revert SafeCastOverflowedUintDowncast(128, value);
  308 |     |         }
  309 |     |         return uint128(value);
  310 |     |     }
  311 |     | 
  312 |     |     /**
  313 |     |      * @dev Returns the downcasted uint120 from uint256, reverting on
  314 |     |      * overflow (when the input is greater than largest uint120).
  315 |     |      *
  316 |     |      * Counterpart to Solidity's `uint120` operator.
  317 |     |      *
  318 |     |      * Requirements:
  319 |     |      *
  320 |     |      * - input must fit into 120 bits
  321 |     |      */
  322 |     |     function toUint120(uint256 value) internal pure returns (uint120) {
  323 |     |         if (value > type(uint120).max) {
  324 |     |             revert SafeCastOverflowedUintDowncast(120, value);
  325 |     |         }
  326 |     |         return uint120(value);
  327 |     |     }
  328 |     | 
  329 |     |     /**
  330 |     |      * @dev Returns the downcasted uint112 from uint256, reverting on
  331 |     |      * overflow (when the input is greater than largest uint112).
  332 |     |      *
  333 |     |      * Counterpart to Solidity's `uint112` operator.
  334 |     |      *
  335 |     |      * Requirements:
  336 |     |      *
  337 |     |      * - input must fit into 112 bits
  338 |     |      */
  339 |     |     function toUint112(uint256 value) internal pure returns (uint112) {
  340 |     |         if (value > type(uint112).max) {
  341 |     |             revert SafeCastOverflowedUintDowncast(112, value);
  342 |     |         }
  343 |     |         return uint112(value);
  344 |     |     }
  345 |     | 
  346 |     |     /**
  347 |     |      * @dev Returns the downcasted uint104 from uint256, reverting on
  348 |     |      * overflow (when the input is greater than largest uint104).
  349 |     |      *
  350 |     |      * Counterpart to Solidity's `uint104` operator.
  351 |     |      *
  352 |     |      * Requirements:
  353 |     |      *
  354 |     |      * - input must fit into 104 bits
  355 |     |      */
  356 |     |     function toUint104(uint256 value) internal pure returns (uint104) {
  357 |     |         if (value > type(uint104).max) {
  358 |     |             revert SafeCastOverflowedUintDowncast(104, value);
  359 |     |         }
  360 |     |         return uint104(value);
  361 |     |     }
  362 |     | 
  363 |     |     /**
  364 |     |      * @dev Returns the downcasted uint96 from uint256, reverting on
  365 |     |      * overflow (when the input is greater than largest uint96).
  366 |     |      *
  367 |     |      * Counterpart to Solidity's `uint96` operator.
  368 |     |      *
  369 |     |      * Requirements:
  370 |     |      *
  371 |     |      * - input must fit into 96 bits
  372 |     |      */
  373 |     |     function toUint96(uint256 value) internal pure returns (uint96) {
  374 |     |         if (value > type(uint96).max) {
  375 |     |             revert SafeCastOverflowedUintDowncast(96, value);
  376 |     |         }
  377 |     |         return uint96(value);
  378 |     |     }
  379 |     | 
  380 |     |     /**
  381 |     |      * @dev Returns the downcasted uint88 from uint256, reverting on
  382 |     |      * overflow (when the input is greater than largest uint88).
  383 |     |      *
  384 |     |      * Counterpart to Solidity's `uint88` operator.
  385 |     |      *
  386 |     |      * Requirements:
  387 |     |      *
  388 |     |      * - input must fit into 88 bits
  389 |     |      */
  390 |     |     function toUint88(uint256 value) internal pure returns (uint88) {
  391 |     |         if (value > type(uint88).max) {
  392 |     |             revert SafeCastOverflowedUintDowncast(88, value);
  393 |     |         }
  394 |     |         return uint88(value);
  395 |     |     }
  396 |     | 
  397 |     |     /**
  398 |     |      * @dev Returns the downcasted uint80 from uint256, reverting on
  399 |     |      * overflow (when the input is greater than largest uint80).
  400 |     |      *
  401 |     |      * Counterpart to Solidity's `uint80` operator.
  402 |     |      *
  403 |     |      * Requirements:
  404 |     |      *
  405 |     |      * - input must fit into 80 bits
  406 |     |      */
  407 |     |     function toUint80(uint256 value) internal pure returns (uint80) {
  408 |     |         if (value > type(uint80).max) {
  409 |     |             revert SafeCastOverflowedUintDowncast(80, value);
  410 |     |         }
  411 |     |         return uint80(value);
  412 |     |     }
  413 |     | 
  414 |     |     /**
  415 |     |      * @dev Returns the downcasted uint72 from uint256, reverting on
  416 |     |      * overflow (when the input is greater than largest uint72).
  417 |     |      *
  418 |     |      * Counterpart to Solidity's `uint72` operator.
  419 |     |      *
  420 |     |      * Requirements:
  421 |     |      *
  422 |     |      * - input must fit into 72 bits
  423 |     |      */
  424 |     |     function toUint72(uint256 value) internal pure returns (uint72) {
  425 |     |         if (value > type(uint72).max) {
  426 |     |             revert SafeCastOverflowedUintDowncast(72, value);
  427 |     |         }
  428 |     |         return uint72(value);
  429 |     |     }
  430 |     | 
  431 |     |     /**
  432 |     |      * @dev Returns the downcasted uint64 from uint256, reverting on
  433 |     |      * overflow (when the input is greater than largest uint64).
  434 |     |      *
  435 |     |      * Counterpart to Solidity's `uint64` operator.
  436 |     |      *
  437 |     |      * Requirements:
  438 |     |      *
  439 |     |      * - input must fit into 64 bits
  440 |     |      */
  441 |     |     function toUint64(uint256 value) internal pure returns (uint64) {
  442 |     |         if (value > type(uint64).max) {
  443 |     |             revert SafeCastOverflowedUintDowncast(64, value);
  444 |     |         }
  445 |     |         return uint64(value);
  446 |     |     }
  447 |     | 
  448 |     |     /**
  449 |     |      * @dev Returns the downcasted uint56 from uint256, reverting on
  450 |     |      * overflow (when the input is greater than largest uint56).
  451 |     |      *
  452 |     |      * Counterpart to Solidity's `uint56` operator.
  453 |     |      *
  454 |     |      * Requirements:
  455 |     |      *
  456 |     |      * - input must fit into 56 bits
  457 |     |      */
  458 |     |     function toUint56(uint256 value) internal pure returns (uint56) {
  459 |     |         if (value > type(uint56).max) {
  460 |     |             revert SafeCastOverflowedUintDowncast(56, value);
  461 |     |         }
  462 |     |         return uint56(value);
  463 |     |     }
  464 |     | 
  465 |     |     /**
  466 |     |      * @dev Returns the downcasted uint48 from uint256, reverting on
  467 |     |      * overflow (when the input is greater than largest uint48).
  468 |     |      *
  469 |     |      * Counterpart to Solidity's `uint48` operator.
  470 |     |      *
  471 |     |      * Requirements:
  472 |     |      *
  473 |     |      * - input must fit into 48 bits
  474 |     |      */
  475 |     |     function toUint48(uint256 value) internal pure returns (uint48) {
  476 |     |         if (value > type(uint48).max) {
  477 |     |             revert SafeCastOverflowedUintDowncast(48, value);
  478 |     |         }
  479 |     |         return uint48(value);
  480 |     |     }
  481 |     | 
  482 |     |     /**
  483 |     |      * @dev Returns the downcasted uint40 from uint256, reverting on
  484 |     |      * overflow (when the input is greater than largest uint40).
  485 |     |      *
  486 |     |      * Counterpart to Solidity's `uint40` operator.
  487 |     |      *
  488 |     |      * Requirements:
  489 |     |      *
  490 |     |      * - input must fit into 40 bits
  491 |     |      */
  492 |     |     function toUint40(uint256 value) internal pure returns (uint40) {
  493 |     |         if (value > type(uint40).max) {
  494 |     |             revert SafeCastOverflowedUintDowncast(40, value);
  495 |     |         }
  496 |     |         return uint40(value);
  497 |     |     }
  498 |     | 
  499 |     |     /**
  500 |     |      * @dev Returns the downcasted uint32 from uint256, reverting on
  501 |     |      * overflow (when the input is greater than largest uint32).
  502 |     |      *
  503 |     |      * Counterpart to Solidity's `uint32` operator.
  504 |     |      *
  505 |     |      * Requirements:
  506 |     |      *
  507 |     |      * - input must fit into 32 bits
  508 |     |      */
  509 |     |     function toUint32(uint256 value) internal pure returns (uint32) {
  510 |     |         if (value > type(uint32).max) {
  511 |     |             revert SafeCastOverflowedUintDowncast(32, value);
  512 |     |         }
  513 |     |         return uint32(value);
  514 |     |     }
  515 |     | 
  516 |     |     /**
  517 |     |      * @dev Returns the downcasted uint24 from uint256, reverting on
  518 |     |      * overflow (when the input is greater than largest uint24).
  519 |     |      *
  520 |     |      * Counterpart to Solidity's `uint24` operator.
  521 |     |      *
  522 |     |      * Requirements:
  523 |     |      *
  524 |     |      * - input must fit into 24 bits
  525 |     |      */
  526 |     |     function toUint24(uint256 value) internal pure returns (uint24) {
  527 |     |         if (value > type(uint24).max) {
  528 |     |             revert SafeCastOverflowedUintDowncast(24, value);
  529 |     |         }
  530 |     |         return uint24(value);
  531 |     |     }
  532 |     | 
  533 |     |     /**
  534 |     |      * @dev Returns the downcasted uint16 from uint256, reverting on
  535 |     |      * overflow (when the input is greater than largest uint16).
  536 |     |      *
  537 |     |      * Counterpart to Solidity's `uint16` operator.
  538 |     |      *
  539 |     |      * Requirements:
  540 |     |      *
  541 |     |      * - input must fit into 16 bits
  542 |     |      */
  543 |     |     function toUint16(uint256 value) internal pure returns (uint16) {
  544 |     |         if (value > type(uint16).max) {
  545 |     |             revert SafeCastOverflowedUintDowncast(16, value);
  546 |     |         }
  547 |     |         return uint16(value);
  548 |     |     }
  549 |     | 
  550 |     |     /**
  551 |     |      * @dev Returns the downcasted uint8 from uint256, reverting on
  552 |     |      * overflow (when the input is greater than largest uint8).
  553 |     |      *
  554 |     |      * Counterpart to Solidity's `uint8` operator.
  555 |     |      *
  556 |     |      * Requirements:
  557 |     |      *
  558 |     |      * - input must fit into 8 bits
  559 |     |      */
  560 |     |     function toUint8(uint256 value) internal pure returns (uint8) {
  561 |     |         if (value > type(uint8).max) {
  562 |     |             revert SafeCastOverflowedUintDowncast(8, value);
  563 |     |         }
  564 |     |         return uint8(value);
  565 |     |     }
  566 |     | 
  567 |     |     /**
  568 |     |      * @dev Converts a signed int256 into an unsigned uint256.
  569 |     |      *
  570 |     |      * Requirements:
  571 |     |      *
  572 |     |      * - input must be greater than or equal to 0.
  573 |     |      */
  574 |     |     function toUint256(int256 value) internal pure returns (uint256) {
  575 |     |         if (value < 0) {
  576 |     |             revert SafeCastOverflowedIntToUint(value);
  577 |     |         }
  578 |     |         return uint256(value);
  579 |     |     }
  580 |     | 
  581 |     |     /**
  582 |     |      * @dev Returns the downcasted int248 from int256, reverting on
  583 |     |      * overflow (when the input is less than smallest int248 or
  584 |     |      * greater than largest int248).
  585 |     |      *
  586 |     |      * Counterpart to Solidity's `int248` operator.
  587 |     |      *
  588 |     |      * Requirements:
  589 |     |      *
  590 |     |      * - input must fit into 248 bits
  591 |     |      */
  592 |     |     function toInt248(int256 value) internal pure returns (int248 downcasted) {
  593 |     |         downcasted = int248(value);
  594 |     |         if (downcasted != value) {
  595 |     |             revert SafeCastOverflowedIntDowncast(248, value);
  596 |     |         }
  597 |     |     }
  598 |     | 
  599 |     |     /**
  600 |     |      * @dev Returns the downcasted int240 from int256, reverting on
  601 |     |      * overflow (when the input is less than smallest int240 or
  602 |     |      * greater than largest int240).
  603 |     |      *
  604 |     |      * Counterpart to Solidity's `int240` operator.
  605 |     |      *
  606 |     |      * Requirements:
  607 |     |      *
  608 |     |      * - input must fit into 240 bits
  609 |     |      */
  610 |     |     function toInt240(int256 value) internal pure returns (int240 downcasted) {
  611 |     |         downcasted = int240(value);
  612 |     |         if (downcasted != value) {
  613 |     |             revert SafeCastOverflowedIntDowncast(240, value);
  614 |     |         }
  615 |     |     }
  616 |     | 
  617 |     |     /**
  618 |     |      * @dev Returns the downcasted int232 from int256, reverting on
  619 |     |      * overflow (when the input is less than smallest int232 or
  620 |     |      * greater than largest int232).
  621 |     |      *
  622 |     |      * Counterpart to Solidity's `int232` operator.
  623 |     |      *
  624 |     |      * Requirements:
  625 |     |      *
  626 |     |      * - input must fit into 232 bits
  627 |     |      */
  628 |     |     function toInt232(int256 value) internal pure returns (int232 downcasted) {
  629 |     |         downcasted = int232(value);
  630 |     |         if (downcasted != value) {
  631 |     |             revert SafeCastOverflowedIntDowncast(232, value);
  632 |     |         }
  633 |     |     }
  634 |     | 
  635 |     |     /**
  636 |     |      * @dev Returns the downcasted int224 from int256, reverting on
  637 |     |      * overflow (when the input is less than smallest int224 or
  638 |     |      * greater than largest int224).
  639 |     |      *
  640 |     |      * Counterpart to Solidity's `int224` operator.
  641 |     |      *
  642 |     |      * Requirements:
  643 |     |      *
  644 |     |      * - input must fit into 224 bits
  645 |     |      */
  646 |     |     function toInt224(int256 value) internal pure returns (int224 downcasted) {
  647 |     |         downcasted = int224(value);
  648 |     |         if (downcasted != value) {
  649 |     |             revert SafeCastOverflowedIntDowncast(224, value);
  650 |     |         }
  651 |     |     }
  652 |     | 
  653 |     |     /**
  654 |     |      * @dev Returns the downcasted int216 from int256, reverting on
  655 |     |      * overflow (when the input is less than smallest int216 or
  656 |     |      * greater than largest int216).
  657 |     |      *
  658 |     |      * Counterpart to Solidity's `int216` operator.
  659 |     |      *
  660 |     |      * Requirements:
  661 |     |      *
  662 |     |      * - input must fit into 216 bits
  663 |     |      */
  664 |     |     function toInt216(int256 value) internal pure returns (int216 downcasted) {
  665 |     |         downcasted = int216(value);
  666 |     |         if (downcasted != value) {
  667 |     |             revert SafeCastOverflowedIntDowncast(216, value);
  668 |     |         }
  669 |     |     }
  670 |     | 
  671 |     |     /**
  672 |     |      * @dev Returns the downcasted int208 from int256, reverting on
  673 |     |      * overflow (when the input is less than smallest int208 or
  674 |     |      * greater than largest int208).
  675 |     |      *
  676 |     |      * Counterpart to Solidity's `int208` operator.
  677 |     |      *
  678 |     |      * Requirements:
  679 |     |      *
  680 |     |      * - input must fit into 208 bits
  681 |     |      */
  682 |     |     function toInt208(int256 value) internal pure returns (int208 downcasted) {
  683 |     |         downcasted = int208(value);
  684 |     |         if (downcasted != value) {
  685 |     |             revert SafeCastOverflowedIntDowncast(208, value);
  686 |     |         }
  687 |     |     }
  688 |     | 
  689 |     |     /**
  690 |     |      * @dev Returns the downcasted int200 from int256, reverting on
  691 |     |      * overflow (when the input is less than smallest int200 or
  692 |     |      * greater than largest int200).
  693 |     |      *
  694 |     |      * Counterpart to Solidity's `int200` operator.
  695 |     |      *
  696 |     |      * Requirements:
  697 |     |      *
  698 |     |      * - input must fit into 200 bits
  699 |     |      */
  700 |     |     function toInt200(int256 value) internal pure returns (int200 downcasted) {
  701 |     |         downcasted = int200(value);
  702 |     |         if (downcasted != value) {
  703 |     |             revert SafeCastOverflowedIntDowncast(200, value);
  704 |     |         }
  705 |     |     }
  706 |     | 
  707 |     |     /**
  708 |     |      * @dev Returns the downcasted int192 from int256, reverting on
  709 |     |      * overflow (when the input is less than smallest int192 or
  710 |     |      * greater than largest int192).
  711 |     |      *
  712 |     |      * Counterpart to Solidity's `int192` operator.
  713 |     |      *
  714 |     |      * Requirements:
  715 |     |      *
  716 |     |      * - input must fit into 192 bits
  717 |     |      */
  718 |     |     function toInt192(int256 value) internal pure returns (int192 downcasted) {
  719 |     |         downcasted = int192(value);
  720 |     |         if (downcasted != value) {
  721 |     |             revert SafeCastOverflowedIntDowncast(192, value);
  722 |     |         }
  723 |     |     }
  724 |     | 
  725 |     |     /**
  726 |     |      * @dev Returns the downcasted int184 from int256, reverting on
  727 |     |      * overflow (when the input is less than smallest int184 or
  728 |     |      * greater than largest int184).
  729 |     |      *
  730 |     |      * Counterpart to Solidity's `int184` operator.
  731 |     |      *
  732 |     |      * Requirements:
  733 |     |      *
  734 |     |      * - input must fit into 184 bits
  735 |     |      */
  736 |     |     function toInt184(int256 value) internal pure returns (int184 downcasted) {
  737 |     |         downcasted = int184(value);
  738 |     |         if (downcasted != value) {
  739 |     |             revert SafeCastOverflowedIntDowncast(184, value);
  740 |     |         }
  741 |     |     }
  742 |     | 
  743 |     |     /**
  744 |     |      * @dev Returns the downcasted int176 from int256, reverting on
  745 |     |      * overflow (when the input is less than smallest int176 or
  746 |     |      * greater than largest int176).
  747 |     |      *
  748 |     |      * Counterpart to Solidity's `int176` operator.
  749 |     |      *
  750 |     |      * Requirements:
  751 |     |      *
  752 |     |      * - input must fit into 176 bits
  753 |     |      */
  754 |     |     function toInt176(int256 value) internal pure returns (int176 downcasted) {
  755 |     |         downcasted = int176(value);
  756 |     |         if (downcasted != value) {
  757 |     |             revert SafeCastOverflowedIntDowncast(176, value);
  758 |     |         }
  759 |     |     }
  760 |     | 
  761 |     |     /**
  762 |     |      * @dev Returns the downcasted int168 from int256, reverting on
  763 |     |      * overflow (when the input is less than smallest int168 or
  764 |     |      * greater than largest int168).
  765 |     |      *
  766 |     |      * Counterpart to Solidity's `int168` operator.
  767 |     |      *
  768 |     |      * Requirements:
  769 |     |      *
  770 |     |      * - input must fit into 168 bits
  771 |     |      */
  772 |     |     function toInt168(int256 value) internal pure returns (int168 downcasted) {
  773 |     |         downcasted = int168(value);
  774 |     |         if (downcasted != value) {
  775 |     |             revert SafeCastOverflowedIntDowncast(168, value);
  776 |     |         }
  777 |     |     }
  778 |     | 
  779 |     |     /**
  780 |     |      * @dev Returns the downcasted int160 from int256, reverting on
  781 |     |      * overflow (when the input is less than smallest int160 or
  782 |     |      * greater than largest int160).
  783 |     |      *
  784 |     |      * Counterpart to Solidity's `int160` operator.
  785 |     |      *
  786 |     |      * Requirements:
  787 |     |      *
  788 |     |      * - input must fit into 160 bits
  789 |     |      */
  790 |     |     function toInt160(int256 value) internal pure returns (int160 downcasted) {
  791 |     |         downcasted = int160(value);
  792 |     |         if (downcasted != value) {
  793 |     |             revert SafeCastOverflowedIntDowncast(160, value);
  794 |     |         }
  795 |     |     }
  796 |     | 
  797 |     |     /**
  798 |     |      * @dev Returns the downcasted int152 from int256, reverting on
  799 |     |      * overflow (when the input is less than smallest int152 or
  800 |     |      * greater than largest int152).
  801 |     |      *
  802 |     |      * Counterpart to Solidity's `int152` operator.
  803 |     |      *
  804 |     |      * Requirements:
  805 |     |      *
  806 |     |      * - input must fit into 152 bits
  807 |     |      */
  808 |     |     function toInt152(int256 value) internal pure returns (int152 downcasted) {
  809 |     |         downcasted = int152(value);
  810 |     |         if (downcasted != value) {
  811 |     |             revert SafeCastOverflowedIntDowncast(152, value);
  812 |     |         }
  813 |     |     }
  814 |     | 
  815 |     |     /**
  816 |     |      * @dev Returns the downcasted int144 from int256, reverting on
  817 |     |      * overflow (when the input is less than smallest int144 or
  818 |     |      * greater than largest int144).
  819 |     |      *
  820 |     |      * Counterpart to Solidity's `int144` operator.
  821 |     |      *
  822 |     |      * Requirements:
  823 |     |      *
  824 |     |      * - input must fit into 144 bits
  825 |     |      */
  826 |     |     function toInt144(int256 value) internal pure returns (int144 downcasted) {
  827 |     |         downcasted = int144(value);
  828 |     |         if (downcasted != value) {
  829 |     |             revert SafeCastOverflowedIntDowncast(144, value);
  830 |     |         }
  831 |     |     }
  832 |     | 
  833 |     |     /**
  834 |     |      * @dev Returns the downcasted int136 from int256, reverting on
  835 |     |      * overflow (when the input is less than smallest int136 or
  836 |     |      * greater than largest int136).
  837 |     |      *
  838 |     |      * Counterpart to Solidity's `int136` operator.
  839 |     |      *
  840 |     |      * Requirements:
  841 |     |      *
  842 |     |      * - input must fit into 136 bits
  843 |     |      */
  844 |     |     function toInt136(int256 value) internal pure returns (int136 downcasted) {
  845 |     |         downcasted = int136(value);
  846 |     |         if (downcasted != value) {
  847 |     |             revert SafeCastOverflowedIntDowncast(136, value);
  848 |     |         }
  849 |     |     }
  850 |     | 
  851 |     |     /**
  852 |     |      * @dev Returns the downcasted int128 from int256, reverting on
  853 |     |      * overflow (when the input is less than smallest int128 or
  854 |     |      * greater than largest int128).
  855 |     |      *
  856 |     |      * Counterpart to Solidity's `int128` operator.
  857 |     |      *
  858 |     |      * Requirements:
  859 |     |      *
  860 |     |      * - input must fit into 128 bits
  861 |     |      */
  862 |     |     function toInt128(int256 value) internal pure returns (int128 downcasted) {
  863 |     |         downcasted = int128(value);
  864 |     |         if (downcasted != value) {
  865 |     |             revert SafeCastOverflowedIntDowncast(128, value);
  866 |     |         }
  867 |     |     }
  868 |     | 
  869 |     |     /**
  870 |     |      * @dev Returns the downcasted int120 from int256, reverting on
  871 |     |      * overflow (when the input is less than smallest int120 or
  872 |     |      * greater than largest int120).
  873 |     |      *
  874 |     |      * Counterpart to Solidity's `int120` operator.
  875 |     |      *
  876 |     |      * Requirements:
  877 |     |      *
  878 |     |      * - input must fit into 120 bits
  879 |     |      */
  880 |     |     function toInt120(int256 value) internal pure returns (int120 downcasted) {
  881 |     |         downcasted = int120(value);
  882 |     |         if (downcasted != value) {
  883 |     |             revert SafeCastOverflowedIntDowncast(120, value);
  884 |     |         }
  885 |     |     }
  886 |     | 
  887 |     |     /**
  888 |     |      * @dev Returns the downcasted int112 from int256, reverting on
  889 |     |      * overflow (when the input is less than smallest int112 or
  890 |     |      * greater than largest int112).
  891 |     |      *
  892 |     |      * Counterpart to Solidity's `int112` operator.
  893 |     |      *
  894 |     |      * Requirements:
  895 |     |      *
  896 |     |      * - input must fit into 112 bits
  897 |     |      */
  898 |     |     function toInt112(int256 value) internal pure returns (int112 downcasted) {
  899 |     |         downcasted = int112(value);
  900 |     |         if (downcasted != value) {
  901 |     |             revert SafeCastOverflowedIntDowncast(112, value);
  902 |     |         }
  903 |     |     }
  904 |     | 
  905 |     |     /**
  906 |     |      * @dev Returns the downcasted int104 from int256, reverting on
  907 |     |      * overflow (when the input is less than smallest int104 or
  908 |     |      * greater than largest int104).
  909 |     |      *
  910 |     |      * Counterpart to Solidity's `int104` operator.
  911 |     |      *
  912 |     |      * Requirements:
  913 |     |      *
  914 |     |      * - input must fit into 104 bits
  915 |     |      */
  916 |     |     function toInt104(int256 value) internal pure returns (int104 downcasted) {
  917 |     |         downcasted = int104(value);
  918 |     |         if (downcasted != value) {
  919 |     |             revert SafeCastOverflowedIntDowncast(104, value);
  920 |     |         }
  921 |     |     }
  922 |     | 
  923 |     |     /**
  924 |     |      * @dev Returns the downcasted int96 from int256, reverting on
  925 |     |      * overflow (when the input is less than smallest int96 or
  926 |     |      * greater than largest int96).
  927 |     |      *
  928 |     |      * Counterpart to Solidity's `int96` operator.
  929 |     |      *
  930 |     |      * Requirements:
  931 |     |      *
  932 |     |      * - input must fit into 96 bits
  933 |     |      */
  934 |     |     function toInt96(int256 value) internal pure returns (int96 downcasted) {
  935 |     |         downcasted = int96(value);
  936 |     |         if (downcasted != value) {
  937 |     |             revert SafeCastOverflowedIntDowncast(96, value);
  938 |     |         }
  939 |     |     }
  940 |     | 
  941 |     |     /**
  942 |     |      * @dev Returns the downcasted int88 from int256, reverting on
  943 |     |      * overflow (when the input is less than smallest int88 or
  944 |     |      * greater than largest int88).
  945 |     |      *
  946 |     |      * Counterpart to Solidity's `int88` operator.
  947 |     |      *
  948 |     |      * Requirements:
  949 |     |      *
  950 |     |      * - input must fit into 88 bits
  951 |     |      */
  952 |     |     function toInt88(int256 value) internal pure returns (int88 downcasted) {
  953 |     |         downcasted = int88(value);
  954 |     |         if (downcasted != value) {
  955 |     |             revert SafeCastOverflowedIntDowncast(88, value);
  956 |     |         }
  957 |     |     }
  958 |     | 
  959 |     |     /**
  960 |     |      * @dev Returns the downcasted int80 from int256, reverting on
  961 |     |      * overflow (when the input is less than smallest int80 or
  962 |     |      * greater than largest int80).
  963 |     |      *
  964 |     |      * Counterpart to Solidity's `int80` operator.
  965 |     |      *
  966 |     |      * Requirements:
  967 |     |      *
  968 |     |      * - input must fit into 80 bits
  969 |     |      */
  970 |     |     function toInt80(int256 value) internal pure returns (int80 downcasted) {
  971 |     |         downcasted = int80(value);
  972 |     |         if (downcasted != value) {
  973 |     |             revert SafeCastOverflowedIntDowncast(80, value);
  974 |     |         }
  975 |     |     }
  976 |     | 
  977 |     |     /**
  978 |     |      * @dev Returns the downcasted int72 from int256, reverting on
  979 |     |      * overflow (when the input is less than smallest int72 or
  980 |     |      * greater than largest int72).
  981 |     |      *
  982 |     |      * Counterpart to Solidity's `int72` operator.
  983 |     |      *
  984 |     |      * Requirements:
  985 |     |      *
  986 |     |      * - input must fit into 72 bits
  987 |     |      */
  988 |     |     function toInt72(int256 value) internal pure returns (int72 downcasted) {
  989 |     |         downcasted = int72(value);
  990 |     |         if (downcasted != value) {
  991 |     |             revert SafeCastOverflowedIntDowncast(72, value);
  992 |     |         }
  993 |     |     }
  994 |     | 
  995 |     |     /**
  996 |     |      * @dev Returns the downcasted int64 from int256, reverting on
  997 |     |      * overflow (when the input is less than smallest int64 or
  998 |     |      * greater than largest int64).
  999 |     |      *
 1000 |     |      * Counterpart to Solidity's `int64` operator.
 1001 |     |      *
 1002 |     |      * Requirements:
 1003 |     |      *
 1004 |     |      * - input must fit into 64 bits
 1005 |     |      */
 1006 |     |     function toInt64(int256 value) internal pure returns (int64 downcasted) {
 1007 |     |         downcasted = int64(value);
 1008 |     |         if (downcasted != value) {
 1009 |     |             revert SafeCastOverflowedIntDowncast(64, value);
 1010 |     |         }
 1011 |     |     }
 1012 |     | 
 1013 |     |     /**
 1014 |     |      * @dev Returns the downcasted int56 from int256, reverting on
 1015 |     |      * overflow (when the input is less than smallest int56 or
 1016 |     |      * greater than largest int56).
 1017 |     |      *
 1018 |     |      * Counterpart to Solidity's `int56` operator.
 1019 |     |      *
 1020 |     |      * Requirements:
 1021 |     |      *
 1022 |     |      * - input must fit into 56 bits
 1023 |     |      */
 1024 |     |     function toInt56(int256 value) internal pure returns (int56 downcasted) {
 1025 |     |         downcasted = int56(value);
 1026 |     |         if (downcasted != value) {
 1027 |     |             revert SafeCastOverflowedIntDowncast(56, value);
 1028 |     |         }
 1029 |     |     }
 1030 |     | 
 1031 |     |     /**
 1032 |     |      * @dev Returns the downcasted int48 from int256, reverting on
 1033 |     |      * overflow (when the input is less than smallest int48 or
 1034 |     |      * greater than largest int48).
 1035 |     |      *
 1036 |     |      * Counterpart to Solidity's `int48` operator.
 1037 |     |      *
 1038 |     |      * Requirements:
 1039 |     |      *
 1040 |     |      * - input must fit into 48 bits
 1041 |     |      */
 1042 |     |     function toInt48(int256 value) internal pure returns (int48 downcasted) {
 1043 |     |         downcasted = int48(value);
 1044 |     |         if (downcasted != value) {
 1045 |     |             revert SafeCastOverflowedIntDowncast(48, value);
 1046 |     |         }
 1047 |     |     }
 1048 |     | 
 1049 |     |     /**
 1050 |     |      * @dev Returns the downcasted int40 from int256, reverting on
 1051 |     |      * overflow (when the input is less than smallest int40 or
 1052 |     |      * greater than largest int40).
 1053 |     |      *
 1054 |     |      * Counterpart to Solidity's `int40` operator.
 1055 |     |      *
 1056 |     |      * Requirements:
 1057 |     |      *
 1058 |     |      * - input must fit into 40 bits
 1059 |     |      */
 1060 |     |     function toInt40(int256 value) internal pure returns (int40 downcasted) {
 1061 |     |         downcasted = int40(value);
 1062 |     |         if (downcasted != value) {
 1063 |     |             revert SafeCastOverflowedIntDowncast(40, value);
 1064 |     |         }
 1065 |     |     }
 1066 |     | 
 1067 |     |     /**
 1068 |     |      * @dev Returns the downcasted int32 from int256, reverting on
 1069 |     |      * overflow (when the input is less than smallest int32 or
 1070 |     |      * greater than largest int32).
 1071 |     |      *
 1072 |     |      * Counterpart to Solidity's `int32` operator.
 1073 |     |      *
 1074 |     |      * Requirements:
 1075 |     |      *
 1076 |     |      * - input must fit into 32 bits
 1077 |     |      */
 1078 |     |     function toInt32(int256 value) internal pure returns (int32 downcasted) {
 1079 |     |         downcasted = int32(value);
 1080 |     |         if (downcasted != value) {
 1081 |     |             revert SafeCastOverflowedIntDowncast(32, value);
 1082 |     |         }
 1083 |     |     }
 1084 |     | 
 1085 |     |     /**
 1086 |     |      * @dev Returns the downcasted int24 from int256, reverting on
 1087 |     |      * overflow (when the input is less than smallest int24 or
 1088 |     |      * greater than largest int24).
 1089 |     |      *
 1090 |     |      * Counterpart to Solidity's `int24` operator.
 1091 |     |      *
 1092 |     |      * Requirements:
 1093 |     |      *
 1094 |     |      * - input must fit into 24 bits
 1095 |     |      */
 1096 |     |     function toInt24(int256 value) internal pure returns (int24 downcasted) {
 1097 |     |         downcasted = int24(value);
 1098 |     |         if (downcasted != value) {
 1099 |     |             revert SafeCastOverflowedIntDowncast(24, value);
 1100 |     |         }
 1101 |     |     }
 1102 |     | 
 1103 |     |     /**
 1104 |     |      * @dev Returns the downcasted int16 from int256, reverting on
 1105 |     |      * overflow (when the input is less than smallest int16 or
 1106 |     |      * greater than largest int16).
 1107 |     |      *
 1108 |     |      * Counterpart to Solidity's `int16` operator.
 1109 |     |      *
 1110 |     |      * Requirements:
 1111 |     |      *
 1112 |     |      * - input must fit into 16 bits
 1113 |     |      */
 1114 |     |     function toInt16(int256 value) internal pure returns (int16 downcasted) {
 1115 |     |         downcasted = int16(value);
 1116 |     |         if (downcasted != value) {
 1117 |     |             revert SafeCastOverflowedIntDowncast(16, value);
 1118 |     |         }
 1119 |     |     }
 1120 |     | 
 1121 |     |     /**
 1122 |     |      * @dev Returns the downcasted int8 from int256, reverting on
 1123 |     |      * overflow (when the input is less than smallest int8 or
 1124 |     |      * greater than largest int8).
 1125 |     |      *
 1126 |     |      * Counterpart to Solidity's `int8` operator.
 1127 |     |      *
 1128 |     |      * Requirements:
 1129 |     |      *
 1130 |     |      * - input must fit into 8 bits
 1131 |     |      */
 1132 |     |     function toInt8(int256 value) internal pure returns (int8 downcasted) {
 1133 |     |         downcasted = int8(value);
 1134 |     |         if (downcasted != value) {
 1135 |     |             revert SafeCastOverflowedIntDowncast(8, value);
 1136 |     |         }
 1137 |     |     }
 1138 |     | 
 1139 |     |     /**
 1140 |     |      * @dev Converts an unsigned uint256 into a signed int256.
 1141 |     |      *
 1142 |     |      * Requirements:
 1143 |     |      *
 1144 |     |      * - input must be less than or equal to maxInt256.
 1145 |     |      */
 1146 |     |     function toInt256(uint256 value) internal pure returns (int256) {
 1147 |     |         // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive
 1148 |     |         if (value > uint256(type(int256).max)) {
 1149 |     |             revert SafeCastOverflowedUintToInt(value);
 1150 |     |         }
 1151 |     |         return int256(value);
 1152 |     |     }
 1153 |     | 
 1154 |     |     /**
 1155 |     |      * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
 1156 |     |      */
 1157 |     |     function toUint(bool b) internal pure returns (uint256 u) {
 1158 |     |         assembly ("memory-safe") {
 1159 |     |             u := iszero(iszero(b))
 1160 |     |         }
 1161 |     |     }
 1162 |     | }
 1163 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {SafeCast} from "./SafeCast.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Standard signed math utilities missing in the Solidity language.
 10 |     |  */
 11 |     | library SignedMath {
 12 |     |     /**
 13 |     |      * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.
 14 |     |      *
 15 |     |      * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
 16 |     |      * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute
 17 |     |      * one branch when needed, making this function more expensive.
 18 |     |      */
 19 |     |     function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {
 20 |     |         unchecked {
 21 |     |             // branchless ternary works because:
 22 |     |             // b ^ (a ^ b) == a
 23 |     |             // b ^ 0 == b
 24 |     |             return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));
 25 |     |         }
 26 |     |     }
 27 |     | 
 28 |     |     /**
 29 |     |      * @dev Returns the largest of two signed numbers.
 30 |     |      */
 31 |     |     function max(int256 a, int256 b) internal pure returns (int256) {
 32 |     |         return ternary(a > b, a, b);
 33 |     |     }
 34 |     | 
 35 |     |     /**
 36 |     |      * @dev Returns the smallest of two signed numbers.
 37 |     |      */
 38 |     |     function min(int256 a, int256 b) internal pure returns (int256) {
 39 |     |         return ternary(a < b, a, b);
 40 |     |     }
 41 |     | 
 42 |     |     /**
 43 |     |      * @dev Returns the average of two signed numbers without overflow.
 44 |     |      * The result is rounded towards zero.
 45 |     |      */
 46 |     |     function average(int256 a, int256 b) internal pure returns (int256) {
 47 |     |         // Formula from the book "Hacker's Delight"
 48 |     |         int256 x = (a & b) + ((a ^ b) >> 1);
 49 |     |         return x + (int256(uint256(x) >> 255) & (a ^ b));
 50 |     |     }
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Returns the absolute unsigned value of a signed value.
 54 |     |      */
 55 |     |     function abs(int256 n) internal pure returns (uint256) {
 56 |     |         unchecked {
 57 |     |             // Formula from the "Bit Twiddling Hacks" by Sean Eron Anderson.
 58 |     |             // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,
 59 |     |             // taking advantage of the most significant (or "sign" bit) in two's complement representation.
 60 |     |             // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,
 61 |     |             // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).
 62 |     |             int256 mask = n >> 255;
 63 |     | 
 64 |     |             // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.
 65 |     |             return uint256((n + mask) ^ mask);
 66 |     |         }
 67 |     |     }
 68 |     | }
 69 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/ERC20/external/properties/ERC20ExternalBasicProperties.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | import {CryticERC20ExternalTestBase} from "../util/ERC20ExternalTestBase.sol";
   4 |     | 
   5 |     | abstract contract CryticERC20ExternalBasicProperties is CryticERC20ExternalTestBase {
   6 |     |     constructor() {
   7 |     |         
   8 |     |     }
   9 |     | 
  10 |     |     ////////////////////////////////////////
  11 |     |     // Properties
  12 |     | 
  13 |     |     // Total supply should change only by means of mint or burn
  14 | *   |     function test_ERC20external_constantSupply() public virtual {
  15 | *r  |         require(!token.isMintableOrBurnable());
  16 |     |         assertEq(token.initialSupply(), token.totalSupply(), "Token supply was modified");
  17 |     |     }
  18 |     | 
  19 |     |     // User balance must not exceed total supply
  20 | *   |     function test_ERC20external_userBalanceNotHigherThanSupply() public {
  21 | *   |         assertLte(token.balanceOf(msg.sender), token.totalSupply(), "User balance higher than total supply");
  22 |     |     }
  23 |     | 
  24 |     |     // Sum of users balance must not exceed total supply
  25 | *   |     function test_ERC20external_userBalancesLessThanTotalSupply() public {
  26 | *   |         uint256 sumBalances = token.balanceOf(address(this)) + token.balanceOf(USER1) + token.balanceOf(USER2) + token.balanceOf(USER3);
  27 | *   |         assertLte(sumBalances, token.totalSupply(), "Sum of user balances are greater than total supply");
  28 |     |     }
  29 |     | 
  30 |     |     // Address zero should have zero balance
  31 | *   |     function test_ERC20external_zeroAddressBalance() public {
  32 | *   |         assertEq(token.balanceOf(address(0)), 0, "Address zero balance not equal to zero");
  33 |     |     }
  34 |     | 
  35 |     |     // Transfers to zero address should not be allowed
  36 | *   |     function test_ERC20external_transferToZeroAddress() public {
  37 | *   |         uint256 balance = token.balanceOf(address(this));
  38 | *   |         require(balance > 0);
  39 |     | 
  40 | *   |         bool r = token.transfer(address(0), balance);
  41 | *   |         assertWithMsg(r == false, "Successful transfer to address zero");
  42 |     |     }
  43 |     | 
  44 |     |     // Transfers to zero address should not be allowed
  45 | *   |     function test_ERC20external_transferFromToZeroAddress(uint256 value) public {
  46 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
  47 | *   |         uint256 allowance = token.allowance(msg.sender, address(this));
  48 | *r  |         require(balance_sender > 0 && allowance > 0);
  49 | *   |         uint256 maxValue = balance_sender >= allowance ? allowance : balance_sender;
  50 |     | 
  51 | *r  |         bool r = token.transferFrom(msg.sender, address(0), value % (maxValue + 1));
  52 |     |         assertWithMsg(r == false, "Successful transferFrom to address zero");
  53 |     |     }
  54 |     | 
  55 |     |     // Self transfers should not break accounting
  56 | *   |     function test_ERC20external_selfTransferFrom(uint256 value) public {
  57 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
  58 | *   |         uint256 allowance = token.allowance(msg.sender, address(this));
  59 | *r  |         require(balance_sender > 0 && allowance > 0);
  60 | *   |         uint256 maxValue = balance_sender >= allowance ? allowance : balance_sender;
  61 |     | 
  62 | *   |         bool r = token.transferFrom(msg.sender, msg.sender, value % (maxValue + 1));
  63 | *   |         assertWithMsg(r == true, "Failed self transferFrom");
  64 | *   |         assertEq(balance_sender, token.balanceOf(msg.sender), "Self transferFrom breaks accounting");
  65 |     |     }
  66 |     | 
  67 |     |     // Self transfers should not break accounting
  68 | *   |     function test_ERC20external_selfTransfer(uint256 value) public {
  69 | *   |         uint256 balance_sender = token.balanceOf(address(this));
  70 | *   |         require(balance_sender > 0);
  71 |     | 
  72 | *   |         bool r = token.transfer(address(this), value % (balance_sender + 1));
  73 | *   |         assertWithMsg(r == true, "Failed self transfer");
  74 | *   |         assertEq(balance_sender, token.balanceOf(address(this)), "Self transfer breaks accounting");
  75 |     |     }
  76 |     | 
  77 |     |     // Transfers for more than available balance should not be allowed
  78 | *   |     function test_ERC20external_transferFromMoreThanBalance(address target) public {
  79 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
  80 | *   |         uint256 balance_receiver = token.balanceOf(target);
  81 | *   |         uint256 allowance = token.allowance(msg.sender, address(this));
  82 | *r  |         require(balance_sender > 0 && allowance > balance_sender);
  83 |     |         
  84 | *r  |         bool r = token.transferFrom(msg.sender, target, balance_sender+1);
  85 |     |         assertWithMsg(r == false, "Successful transferFrom for more than account balance");
  86 |     |         assertEq(token.balanceOf(msg.sender), balance_sender, "TransferFrom for more than balance modified source balance");
  87 |     |         assertEq(token.balanceOf(target), balance_receiver, "TransferFrom for more than balance modified target balance");
  88 |     |     }
  89 |     | 
  90 |     |     // Transfers for more than available balance should not be allowed
  91 | *   |     function test_ERC20external_transferMoreThanBalance(address target) public {
  92 | *   |         uint256 balance_sender = token.balanceOf(address(this));
  93 | *   |         uint256 balance_receiver = token.balanceOf(target);
  94 | *   |         require(balance_sender > 0);
  95 |     | 
  96 | *r  |         bool r = token.transfer(target, balance_sender+1);
  97 | *   |         assertWithMsg(r == false, "Successful transfer for more than account balance");
  98 | *   |         assertEq(token.balanceOf(address(this)), balance_sender, "Transfer for more than balance modified source balance");
  99 | *   |         assertEq(token.balanceOf(target), balance_receiver, "Transfer for more than balance modified target balance");
 100 |     |     }
 101 |     | 
 102 |     |     // Zero amount transfers should not break accounting
 103 | *   |     function test_ERC20external_transferZeroAmount(address target) public {
 104 | *   |         uint256 balance_sender = token.balanceOf(address(this));
 105 | *   |         uint256 balance_receiver = token.balanceOf(target);
 106 | *   |         require(balance_sender > 0);
 107 |     | 
 108 | *   |         bool r = token.transfer(target, 0);
 109 | *   |         assertWithMsg(r == true, "Zero amount transfer failed");
 110 | *   |         assertEq(token.balanceOf(address(this)), balance_sender, "Zero amount transfer modified source balance");
 111 | *   |         assertEq(token.balanceOf(target), balance_receiver, "Zero amount transfer modified target balance");
 112 |     |     }
 113 |     | 
 114 |     |     // Zero amount transfers should not break accounting
 115 | *   |     function test_ERC20external_transferFromZeroAmount(address target) public {
 116 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
 117 | *   |         uint256 balance_receiver = token.balanceOf(target);
 118 | *   |         uint256 allowance = token.allowance(msg.sender, address(this));
 119 | *r  |         require(balance_sender > 0 && allowance > 0);
 120 |     | 
 121 | *r  |         bool r = token.transferFrom(msg.sender, target, 0);
 122 | *   |         assertWithMsg(r == true, "Zero amount transferFrom failed");
 123 | *   |         assertEq(token.balanceOf(msg.sender), balance_sender, "Zero amount transferFrom modified source balance");
 124 | *   |         assertEq(token.balanceOf(target), balance_receiver, "Zero amount transferFrom modified target balance");
 125 |     |     }
 126 |     | 
 127 |     |     // Transfers should update accounting correctly
 128 | *   |     function test_ERC20external_transfer(address target, uint256 amount) public {
 129 | *r  |         require(target != address(this));
 130 | *   |         uint256 balance_sender = token.balanceOf(address(this));
 131 | *   |         uint256 balance_receiver = token.balanceOf(target);
 132 | *   |         require(balance_sender > 2);
 133 | *   |         uint256 transfer_value = (amount % balance_sender) + 1;
 134 |     | 
 135 | *   |         bool r = token.transfer(target, transfer_value);
 136 | *   |         assertWithMsg(r == true, "transfer failed");
 137 | *   |         assertEq(token.balanceOf(address(this)), balance_sender-transfer_value, "Wrong source balance after transfer");
 138 | *   |         assertEq(token.balanceOf(target), balance_receiver+transfer_value, "Wrong target balance after transfer");
 139 |     |     }
 140 |     | 
 141 |     |     // Transfers should update accounting correctly
 142 | *   |     function test_ERC20external_transferFrom(address target, uint256 amount) public {
 143 | *r  |         require(target != address(this));
 144 | *r  |         require(target != msg.sender);
 145 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
 146 | *   |         uint256 balance_receiver = token.balanceOf(target);
 147 | *   |         uint256 allowance = token.allowance(msg.sender, address(this));
 148 | *r  |         require(balance_sender > 2 && allowance > balance_sender);
 149 | *   |         uint256 transfer_value = (amount % balance_sender) + 1;
 150 |     | 
 151 | *   |         bool r = token.transferFrom(msg.sender, target, transfer_value);
 152 | *   |         assertWithMsg(r == true, "transfer failed");
 153 | *   |         assertEq(token.balanceOf(msg.sender), balance_sender - transfer_value, "Wrong source balance after transferFrom");
 154 | *   |         assertEq(token.balanceOf(target), balance_receiver + transfer_value, "Wrong target balance after transferFrom");
 155 |     |     }
 156 |     | 
 157 |     |     // Approve should set correct allowances
 158 | *   |     function test_ERC20external_setAllowance(address target, uint256 amount) public {
 159 | *r  |         bool r = token.approve(target, amount);
 160 | *   |         assertWithMsg(r == true, "Failed to set allowance via approve");
 161 | *   |         assertEq(token.allowance(address(this), target), amount, "Allowance not set correctly");
 162 |     |     }
 163 |     | 
 164 |     |     // Approve should set correct allowances
 165 | *   |     function test_ERC20external_setAllowanceTwice(address target, uint256 amount) public {
 166 | *r  |         bool r = token.approve(target, amount);
 167 | *   |         assertWithMsg(r == true, "Failed to set allowance via approve");
 168 | *   |         assertEq(token.allowance(address(this), target), amount, "Allowance not set correctly");
 169 |     | 
 170 | *   |         r = token.approve(target, amount/2);
 171 | *   |         assertWithMsg(r == true, "Failed to set allowance via approve");
 172 | *   |         assertEq(token.allowance(address(this), target), amount/2, "Allowance not set correctly");
 173 |     |     }
 174 |     | 
 175 |     |     // TransferFrom should decrease allowance
 176 | *   |     function test_ERC20external_spendAllowanceAfterTransfer(address target, uint256 amount) public {
 177 | *r  |         require(target != address(this) && target != address(0));
 178 | *r  |         require(target != msg.sender);
 179 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
 180 | *   |         uint256 current_allowance = token.allowance(msg.sender, address(this));
 181 | *r  |         require(balance_sender > 0 && current_allowance > balance_sender);
 182 | *   |         uint256 transfer_value = (amount % balance_sender) + 1;
 183 |     | 
 184 | *   |         bool r = token.transferFrom(msg.sender, target, transfer_value);
 185 | *   |         assertWithMsg(r == true, "transferFrom failed");
 186 |     | 
 187 |     |         // Some implementations take an allowance of 2**256-1 as infinite, and therefore don't update
 188 | *   |         if (current_allowance != type(uint256).max) {
 189 | *   |             assertEq(token.allowance(msg.sender, address(this)), current_allowance - transfer_value, "Allowance not updated correctly");
 190 |     |         }
 191 |     |     }
 192 |     | 
 193 |     | }
 194 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/ERC20/external/properties/ERC20ExternalBurnableProperties.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | import "../util/ERC20ExternalTestBase.sol";
  4 |     | 
  5 |     | abstract contract CryticERC20ExternalBurnableProperties is CryticERC20ExternalTestBase {
  6 |     | 
  7 |     |     constructor() {
  8 |     |         
  9 |     |     }
 10 |     | 
 11 |     |     ////////////////////////////////////////
 12 |     |     // Properties
 13 |     | 
 14 |     |     // Burn should update user balance and total supply
 15 | *   |     function test_ERC20external_burn(uint256 amount) public {
 16 | *   |         uint256 balance_sender = token.balanceOf(address(this));
 17 | *   |         uint256 supply = token.totalSupply();
 18 | *   |         require(balance_sender > 0);
 19 | *   |         uint256 burn_amount = amount % (balance_sender+1);
 20 |     | 
 21 | *   |         token.burn(burn_amount);
 22 | *   |         assertEq(token.balanceOf(address(this)), balance_sender - burn_amount, "Source balance incorrect after burn");
 23 | *   |         assertEq(token.totalSupply(), supply-burn_amount, "Total supply incorrect after burn");
 24 |     |     }
 25 |     | 
 26 |     |     // Burn should update user balance and total supply
 27 | *   |     function test_ERC20external_burnFrom(uint256 amount) public {
 28 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
 29 | *   |         uint256 allowance = token.allowance(msg.sender, address(this));
 30 | *r  |         require(balance_sender > 0 && allowance > balance_sender);
 31 | *   |         uint256 supply = token.totalSupply();
 32 | *   |         uint256 burn_amount = amount % (balance_sender+1);
 33 |     | 
 34 | *   |         token.burnFrom(msg.sender, burn_amount);
 35 | *   |         assertEq(token.balanceOf(msg.sender), balance_sender - burn_amount, "Source balance incorrect after burnFrom");
 36 | *   |         assertEq(token.totalSupply(), supply-burn_amount, "Total supply incorrect after burnFrom");
 37 |     |     }
 38 |     | 
 39 |     |     // burnFrom should update allowance
 40 | *   |     function test_ERC20external_burnFromUpdateAllowance(uint256 amount) public {
 41 | *   |         uint256 balance_sender = token.balanceOf(msg.sender);
 42 | *   |         uint256 current_allowance = token.allowance(msg.sender, address(this));
 43 | *r  |         require(balance_sender > 0 && current_allowance > balance_sender);
 44 | *   |         uint256 burn_amount = amount % (balance_sender+1);
 45 |     | 
 46 | *   |         token.burnFrom(msg.sender, burn_amount);
 47 |     | 
 48 |     |         // Some implementations take an allowance of 2**256-1 as infinite, and therefore don't update
 49 | *   |         if (current_allowance != type(uint256).max) {
 50 | *   |             assertEq(token.allowance(msg.sender, address(this)), current_allowance - burn_amount, "Allowance not updated correctly");
 51 |     |         }
 52 |     |     }
 53 |     | 
 54 |     | }
 55 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/ERC20/external/properties/ERC20ExternalMintableProperties.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | import "../util/ERC20ExternalTestBase.sol";
  4 |     | 
  5 |     | abstract contract CryticERC20ExternalMintableProperties is CryticERC20ExternalTestBase {
  6 |     | 
  7 |     |     constructor() {
  8 |     |         
  9 |     |     }
 10 |     | 
 11 |     |     ////////////////////////////////////////
 12 |     |     // Properties
 13 |     | 
 14 |     |     // Minting tokens should update user balance and total supply
 15 | *   |     function test_ERC20external_mintTokens(address target, uint256 amount) public {
 16 | *   |         uint256 balance_receiver = token.balanceOf(target);
 17 | *   |         uint256 supply = token.totalSupply();
 18 |     | 
 19 | *r  |         token.mint(target, amount);
 20 | *   |         assertEq(token.balanceOf(target), balance_receiver+amount, "Mint failed to update target balance");
 21 | *   |         assertEq(token.totalSupply(), supply+amount, "Mint failed to update total supply");
 22 |     |     }
 23 |     | }
 24 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/ERC20/external/util/ERC20ExternalTestBase.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | import "../../../util/PropertiesHelper.sol";
  4 |     | import "./ITokenMock.sol";
  5 |     | import "../../../util/PropertiesConstants.sol";
  6 |     | 
  7 |     | abstract contract CryticERC20ExternalTestBase is PropertiesAsserts, PropertiesConstants {
  8 |     | 
  9 |     |     ITokenMock token;
 10 |     | 
 11 |     |     constructor() {
 12 |     |     }
 13 |     | 
 14 |     | }
 15 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/ERC20/external/util/ITokenMock.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | import "../../../util/IERC20.sol";
  4 |     | 
  5 |     | interface ITokenMock is IERC20 {
  6 |     |     function isMintableOrBurnable() external returns (bool);
  7 |     |     function initialSupply() external returns (uint256);
  8 |     | 
  9 |     |     function burn(uint256) external;
 10 |     |     function burnFrom(address, uint256) external;
 11 |     |     function mint(address, uint256) external;
 12 |     |     function pause() external;
 13 |     |     function unpause() external;
 14 |     |     function paused() external returns (bool);
 15 |     |     function owner() external returns (address);
 16 |     |     function increaseAllowance(address, uint256) external returns (bool);
 17 |     |     function decreaseAllowance(address, uint256) external returns (bool);
 18 |     | }

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/util/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.0;
  3 |     | interface IERC20 {
  4 |     |     /**
  5 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
  6 |     |      * another (`to`).
  7 |     |      *
  8 |     |      * Note that `value` may be zero.
  9 |     |      */
 10 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 11 |     | 
 12 |     |     /**
 13 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 14 |     |      * a call to {approve}. `value` is the new allowance.
 15 |     |      */
 16 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Returns the amount of tokens in existence.
 20 |     |      */
 21 |     |     function totalSupply() external view returns (uint256);
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Returns the amount of tokens owned by `account`.
 25 |     |      */
 26 |     |     function balanceOf(address account) external view returns (uint256);
 27 |     | 
 28 |     |     /**
 29 |     |      * @dev Moves `amount` tokens from the caller's account to `to`.
 30 |     |      *
 31 |     |      * Returns a boolean value indicating whether the operation succeeded.
 32 |     |      *
 33 |     |      * Emits a {Transfer} event.
 34 |     |      */
 35 |     |     function transfer(address to, uint256 amount) external returns (bool);
 36 |     | 
 37 |     |     /**
 38 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 39 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 40 |     |      * zero by default.
 41 |     |      *
 42 |     |      * This value changes when {approve} or {transferFrom} are called.
 43 |     |      */
 44 |     |     function allowance(address owner, address spender) external view returns (uint256);
 45 |     | 
 46 |     |     /**
 47 |     |      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
 48 |     |      *
 49 |     |      * Returns a boolean value indicating whether the operation succeeded.
 50 |     |      *
 51 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 52 |     |      * that someone may use both the old and the new allowance by unfortunate
 53 |     |      * transaction ordering. One possible solution to mitigate this race
 54 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 55 |     |      * desired value afterwards:
 56 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 57 |     |      *
 58 |     |      * Emits an {Approval} event.
 59 |     |      */
 60 |     |     function approve(address spender, uint256 amount) external returns (bool);
 61 |     | 
 62 |     |     /**
 63 |     |      * @dev Moves `amount` tokens from `from` to `to` using the
 64 |     |      * allowance mechanism. `amount` is then deducted from the caller's
 65 |     |      * allowance.
 66 |     |      *
 67 |     |      * Returns a boolean value indicating whether the operation succeeded.
 68 |     |      *
 69 |     |      * Emits a {Transfer} event.
 70 |     |      */
 71 |     |     function transferFrom(
 72 |     |         address from,
 73 |     |         address to,
 74 |     |         uint256 amount
 75 |     |     ) external returns (bool);
 76 |     | 
 77 |     |     function decimals() external returns (uint8);
 78 |     | }
 79 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/util/PropertiesConstants.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | abstract contract PropertiesConstants {
  4 |     |     // Constant echidna addresses
  5 | *   |     address constant USER1 = address(0x10000);
  6 | *   |     address constant USER2 = address(0x20000);
  7 | *   |     address constant USER3 = address(0x30000);
  8 | *   |     uint256 constant INITIAL_BALANCE = 1000e18;
  9 |     | }
 10 |     | 

/Users/nikolajparahin/Downloads/fuzzing_hw4/src/lib/properties/contracts/util/PropertiesHelper.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | abstract contract PropertiesAsserts {
   4 |     |     event LogUint256(string,uint256);
   5 |     |     event LogAddress(string, address);
   6 |     |     event LogString(string);
   7 |     | 
   8 |     |     event AssertFail(string);
   9 |     |     event AssertEqFail(string);
  10 |     |     event AssertNeqFail(string);
  11 |     |     event AssertGteFail(string);
  12 |     |     event AssertGtFail(string);
  13 |     |     event AssertLteFail(string);
  14 |     |     event AssertLtFail(string);
  15 |     | 
  16 | *   |     function assertWithMsg(bool b, string memory reason) internal {
  17 | *   |         if(!b){
  18 | *   |             emit AssertFail(reason);
  19 | *   |             assert(false);
  20 |     |         }
  21 |     |     }
  22 |     | 
  23 |     |     /// @notice asserts that a is equal to b. Violations are logged using reason.
  24 | *   |     function assertEq(uint256 a, uint256 b, string memory reason) internal {
  25 | *   |         if(a != b){
  26 | *   |             string memory aStr = PropertiesLibString.toString(a);
  27 | *   |             string memory bStr = PropertiesLibString.toString(b);
  28 | *   |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"!=",bStr,", reason: ", reason);
  29 | *   |             emit AssertEqFail(string(assertMsg));
  30 | *   |             assert(false);
  31 |     |         }
  32 |     |     }
  33 |     | 
  34 |     |     /// @notice int256 version of assertEq
  35 |     |     function assertEq(int256 a, int256 b, string memory reason) internal {
  36 |     |         if(a != b){
  37 |     |             string memory aStr = PropertiesLibString.toString(a);
  38 |     |             string memory bStr = PropertiesLibString.toString(b);
  39 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"!=",bStr,", reason: ", reason);
  40 |     |             emit AssertEqFail(string(assertMsg));
  41 |     |             assert(false);
  42 |     |         }
  43 |     |     }
  44 |     | 
  45 |     |     /// @notice asserts that a is not equal to b. Violations are logged using reason.
  46 |     |     function assertNeq(uint256 a, uint256 b, string memory reason) internal {
  47 |     |         if(a == b){
  48 |     |             string memory aStr = PropertiesLibString.toString(a);
  49 |     |             string memory bStr = PropertiesLibString.toString(b);
  50 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"==",bStr,", reason: ", reason);
  51 |     |             emit AssertNeqFail(string(assertMsg));
  52 |     |             assert(false);
  53 |     |         }
  54 |     |     }
  55 |     | 
  56 |     |     /// @notice int256 version of assertNeq
  57 |     |     function assertNeq(int256 a, int256 b, string memory reason) internal {
  58 |     |         if(a == b){
  59 |     |             string memory aStr = PropertiesLibString.toString(a);
  60 |     |             string memory bStr = PropertiesLibString.toString(b);
  61 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"==",bStr,", reason: ", reason);
  62 |     |             emit AssertNeqFail(string(assertMsg));
  63 |     |             assert(false);
  64 |     |         }
  65 |     |     }
  66 |     | 
  67 |     |     /// @notice asserts that a is greater than or equal to b. Violations are logged using reason.
  68 |     |     function assertGte(uint256 a, uint256 b, string memory reason) internal {
  69 |     |         if(!(a >= b)) {
  70 |     |             string memory aStr = PropertiesLibString.toString(a);
  71 |     |             string memory bStr = PropertiesLibString.toString(b);
  72 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"<",bStr," failed, reason: ", reason);
  73 |     |             emit AssertGteFail(string(assertMsg));
  74 |     |             assert(false);
  75 |     |         }
  76 |     |     }
  77 |     | 
  78 |     |     /// @notice int256 version of assertGte
  79 |     |     function assertGte(int256 a, int256 b, string memory reason) internal {
  80 |     |         if(!(a >= b)) {
  81 |     |             string memory aStr = PropertiesLibString.toString(a);
  82 |     |             string memory bStr = PropertiesLibString.toString(b);
  83 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"<",bStr," failed, reason: ", reason);
  84 |     |             emit AssertGteFail(string(assertMsg));
  85 |     |             assert(false);
  86 |     |         }
  87 |     |     }
  88 |     | 
  89 |     |     /// @notice asserts that a is greater than b. Violations are logged using reason.
  90 |     |     function assertGt(uint256 a, uint256 b, string memory reason) internal {
  91 |     |         if(!(a > b)) {
  92 |     |             string memory aStr = PropertiesLibString.toString(a);
  93 |     |             string memory bStr = PropertiesLibString.toString(b);
  94 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"<=", bStr," failed, reason: ", reason);
  95 |     |             emit AssertGtFail(string(assertMsg));
  96 |     |             assert(false);
  97 |     |         }
  98 |     |     }
  99 |     | 
 100 |     |     /// @notice int256 version of assertGt
 101 |     |     function assertGt(int256 a, int256 b, string memory reason) internal {
 102 |     |         if(!(a > b)) {
 103 |     |             string memory aStr = PropertiesLibString.toString(a);
 104 |     |             string memory bStr = PropertiesLibString.toString(b);
 105 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,"<=", bStr," failed, reason: ", reason);
 106 |     |             emit AssertGtFail(string(assertMsg));
 107 |     |             assert(false);
 108 |     |         }
 109 |     |     }
 110 |     | 
 111 |     |     /// @notice asserts that a is less than or equal to b. Violations are logged using reason.
 112 | *   |     function assertLte(uint256 a, uint256 b, string memory reason) internal {
 113 | *   |         if(!(a <= b)) {
 114 | *   |             string memory aStr = PropertiesLibString.toString(a);
 115 | *   |             string memory bStr = PropertiesLibString.toString(b);
 116 | *   |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,">", bStr," failed, reason: ", reason);
 117 | *   |             emit AssertLteFail(string(assertMsg));
 118 | *   |             assert(false);
 119 |     |         }
 120 |     |     }
 121 |     | 
 122 |     |     /// @notice int256 version of assertLte
 123 |     |     function assertLte(int256 a, int256 b, string memory reason) internal {
 124 |     |         if(!(a <= b)) {
 125 |     |             string memory aStr = PropertiesLibString.toString(a);
 126 |     |             string memory bStr = PropertiesLibString.toString(b);
 127 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,">", bStr," failed, reason: ", reason);
 128 |     |             emit AssertLteFail(string(assertMsg));
 129 |     |             assert(false);
 130 |     |         }
 131 |     |     }
 132 |     | 
 133 |     |     /// @notice asserts that a is less than b. Violations are logged using reason.
 134 |     |     function assertLt(uint256 a, uint256 b, string memory reason) internal {
 135 |     |         if(!(a < b)) {
 136 |     |             string memory aStr = PropertiesLibString.toString(a);
 137 |     |             string memory bStr = PropertiesLibString.toString(b);
 138 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,">=",bStr," failed, reason: ", reason);
 139 |     |             emit AssertLtFail(string(assertMsg));
 140 |     |             assert(false);
 141 |     |         }
 142 |     |     }
 143 |     | 
 144 |     |     /// @notice int256 version of assertLt
 145 |     |     function assertLt(int256 a, int256 b, string memory reason) internal {
 146 |     |         if(!(a < b)) {
 147 |     |             string memory aStr = PropertiesLibString.toString(a);
 148 |     |             string memory bStr = PropertiesLibString.toString(b);
 149 |     |             bytes memory assertMsg = abi.encodePacked("Invalid: ", aStr,">=",bStr," failed, reason: ", reason);
 150 |     |             emit AssertLtFail(string(assertMsg));
 151 |     |             assert(false);
 152 |     |         }
 153 |     |     }
 154 |     | 
 155 |     |     /// @notice Clamps value to be between low and high, both inclusive
 156 |     |     function clampBetween(uint256 value, uint256 low, uint256 high) internal returns (uint256) {
 157 |     |         if(value < low || value > high) {
 158 |     |             uint ans = low + (value % (high - low + 1));
 159 |     |             string memory valueStr = PropertiesLibString.toString(value);
 160 |     |             string memory ansStr = PropertiesLibString.toString(ans);
 161 |     |             bytes memory message = abi.encodePacked("Clamping value ", valueStr, " to ", ansStr);
 162 |     |             emit LogString(string(message));
 163 |     |             return ans;
 164 |     |         }
 165 |     |         return value;
 166 |     |     }
 167 |     | 
 168 |     |     /// @notice int256 version of clampBetween
 169 |     |     function clampBetween(int256 value, int256 low, int256 high) internal returns (int256) {
 170 |     |         if(value < low || value > high) {
 171 |     |             int range = high - low + 1;
 172 |     |             int clamped = (value - low) % (range);
 173 |     |             if (clamped < 0) clamped += range;
 174 |     |             int ans = low + clamped;
 175 |     |             string memory valueStr = PropertiesLibString.toString(value);
 176 |     |             string memory ansStr = PropertiesLibString.toString(ans);
 177 |     |             bytes memory message = abi.encodePacked("Clamping value ", valueStr, " to ", ansStr);
 178 |     |             emit LogString(string(message));
 179 |     |             return ans;
 180 |     |         }
 181 |     |         return value;
 182 |     |     }
 183 |     | 
 184 |     |     /// @notice clamps a to be less than b
 185 |     |     function clampLt(uint256 a, uint256 b) internal returns (uint256){
 186 |     |         if ( !(a < b)) {
 187 |     |             assertNeq(b, 0, "clampLt cannot clamp value a to be less than zero. Check your inputs/assumptions.");
 188 |     |             uint256 value = a % b;
 189 |     |             string memory aStr = PropertiesLibString.toString(a);
 190 |     |             string memory valueStr = PropertiesLibString.toString(value);
 191 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 192 |     |             emit LogString(string(message));
 193 |     |             return value;
 194 |     |         }
 195 |     |         return a;
 196 |     |     }
 197 |     | 
 198 |     |     /// @notice int256 version of clampLt
 199 |     |     function clampLt(int256 a, int256 b) internal returns (int256){
 200 |     |         if ( !(a < b)) {
 201 |     |             int256 value = b-1;
 202 |     |             string memory aStr = PropertiesLibString.toString(a);
 203 |     |             string memory valueStr = PropertiesLibString.toString(value);
 204 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 205 |     |             emit LogString(string(message));
 206 |     |             return value;
 207 |     |         }
 208 |     |         return a;
 209 |     |     }
 210 |     | 
 211 |     |     /// @notice clamps a to be less than or equal to b
 212 |     |     function clampLte(uint256 a, uint256 b) internal returns (uint256) {
 213 |     |         if(!(a <= b)) {
 214 |     |             uint256 value = a % (b+1);
 215 |     |             string memory aStr = PropertiesLibString.toString(a);
 216 |     |             string memory valueStr = PropertiesLibString.toString(value);
 217 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 218 |     |             emit LogString(string(message));
 219 |     |             return value;
 220 |     |         }
 221 |     |         return a;
 222 |     |     }
 223 |     | 
 224 |     |     /// @notice int256 version of clampLte
 225 |     |     function clampLte(int256 a, int256 b) internal returns (int256) {
 226 |     |         if(!(a <= b)) {
 227 |     |             int256 value = b;
 228 |     |             string memory aStr = PropertiesLibString.toString(a);
 229 |     |             string memory valueStr = PropertiesLibString.toString(value);
 230 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 231 |     |             emit LogString(string(message));
 232 |     |             return value;
 233 |     |         }
 234 |     |         return a;
 235 |     |     }
 236 |     | 
 237 |     |     /// @notice clamps a to be greater than b
 238 |     |     function clampGt(uint256 a, uint256 b) internal returns (uint256) {
 239 |     |         if(!(a > b)){
 240 |     |             assertNeq(b, type(uint256).max, "clampGt cannot clamp value a to be larger than uint256.max. Check your inputs/assumptions.");
 241 |     |             uint256 value = b+1;
 242 |     |             string memory aStr = PropertiesLibString.toString(a);
 243 |     |             string memory valueStr = PropertiesLibString.toString(value);
 244 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 245 |     |             emit LogString(string(message));
 246 |     |             return value;
 247 |     |         } else {
 248 |     |             return a;
 249 |     |         }
 250 |     |     }
 251 |     | 
 252 |     |     /// @notice int256 version of clampGt
 253 |     |     function clampGt(int256 a, int256 b) internal returns (int256) {
 254 |     |         if(!(a > b)){
 255 |     |             int256 value = b+1;
 256 |     |             string memory aStr = PropertiesLibString.toString(a);
 257 |     |             string memory valueStr = PropertiesLibString.toString(value);
 258 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 259 |     |             emit LogString(string(message));
 260 |     |             return value;
 261 |     |         } else {
 262 |     |             return a;
 263 |     |         }
 264 |     |     }
 265 |     | 
 266 |     |     /// @notice clamps a to be greater than or equal to b
 267 |     |     function clampGte(uint256 a, uint256 b) internal returns (uint256) {
 268 |     |         if(!(a > b)){
 269 |     |             uint256 value = b;
 270 |     |             string memory aStr = PropertiesLibString.toString(a);
 271 |     |             string memory valueStr = PropertiesLibString.toString(value);
 272 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 273 |     |             emit LogString(string(message));
 274 |     |             return value;
 275 |     |         }
 276 |     |         return a;
 277 |     |     }
 278 |     | 
 279 |     |     /// @notice int256 version of clampGte
 280 |     |     function clampGte(int256 a, int256 b) internal returns (int256) {
 281 |     |         if(!(a > b)){
 282 |     |             int256 value = b;
 283 |     |             string memory aStr = PropertiesLibString.toString(a);
 284 |     |             string memory valueStr = PropertiesLibString.toString(value);
 285 |     |             bytes memory message = abi.encodePacked("Clamping value ", aStr, " to ", valueStr);
 286 |     |             emit LogString(string(message));
 287 |     |             return value;
 288 |     |         }
 289 |     |         return a;
 290 |     |     }
 291 |     | }
 292 |     | 
 293 |     | /// @notice Efficient library for creating string representations of integers.
 294 |     | /// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)
 295 |     | /// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)
 296 |     | /// @dev Name of the library is modified to prevent collisions with contract-under-test uses of LibString
 297 |     | library PropertiesLibString {
 298 |     | 
 299 |     |     function toString(int256 value) internal pure returns (string memory str) {
 300 |     |         uint256 absValue = value >= 0 ? uint256(value) : uint256(-value);
 301 |     |         str = toString(absValue);
 302 |     | 
 303 |     |         if(value < 0) {
 304 |     |             str = string(abi.encodePacked("-", str));
 305 |     |         }
 306 |     |     }
 307 |     | 
 308 | *   |     function toString(uint256 value) internal pure returns (string memory str) {
 309 |     |         /// @solidity memory-safe-assembly
 310 | *   |         assembly {
 311 |     |             // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes
 312 |     |             // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the
 313 |     |             // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.
 314 | *   |             let newFreeMemoryPointer := add(mload(0x40), 160)
 315 |     | 
 316 |     |             // Update the free memory pointer to avoid overriding our string.
 317 | *   |             mstore(0x40, newFreeMemoryPointer)
 318 |     | 
 319 |     |             // Assign str to the end of the zone of newly allocated memory.
 320 | *   |             str := sub(newFreeMemoryPointer, 32)
 321 |     | 
 322 |     |             // Clean the last word of memory it may not be overwritten.
 323 | *   |             mstore(str, 0)
 324 |     | 
 325 |     |             // Cache the end of the memory to calculate the length later.
 326 | *   |             let end := str
 327 |     | 
 328 |     |             // We write the string from rightmost digit to leftmost digit.
 329 |     |             // The following is essentially a do-while loop that also handles the zero case.
 330 |     |             // prettier-ignore
 331 | *   |             for { let temp := value } 1 {} {
 332 |     |                 // Move the pointer 1 byte to the left.
 333 | *   |                 str := sub(str, 1)
 334 |     | 
 335 |     |                 // Write the character to the pointer.
 336 |     |                 // The ASCII index of the '0' character is 48.
 337 | *   |                 mstore8(str, add(48, mod(temp, 10)))
 338 |     | 
 339 |     |                 // Keep dividing temp until zero.
 340 | *   |                 temp := div(temp, 10)
 341 |     | 
 342 |     |                  // prettier-ignore
 343 | *   |                 if iszero(temp) { break }
 344 |     |             }
 345 |     | 
 346 |     |             // Compute and cache the final total length of the string.
 347 | *   |             let length := sub(end, str)
 348 |     | 
 349 |     |             // Move the pointer 32 bytes leftwards to make room for the length.
 350 | *   |             str := sub(str, 32)
 351 |     | 
 352 |     |             // Store the string's length at the start of memory allocated for our string.
 353 | *   |             mstore(str, length)
 354 |     |         }
 355 |     |     }
 356 |     | 
 357 |     |     function toString(address value) internal pure returns (string memory str){
 358 |     |         bytes memory s = new bytes(40);
 359 |     |         for (uint i = 0; i < 20; i++) {
 360 |     |             bytes1 b = bytes1(uint8(uint(uint160(value)) / (2**(8*(19 - i)))));
 361 |     |             bytes1 hi = bytes1(uint8(b) / 16);
 362 |     |             bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));
 363 |     |             s[2*i] = char(hi);
 364 |     |             s[2*i+1] = char(lo);            
 365 |     |         }
 366 |     |         return string(s);
 367 |     |     }
 368 |     | 
 369 |     |     function char(bytes1 b) internal pure returns (bytes1 c) {
 370 |     |         if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);
 371 |     |         else return bytes1(uint8(b) + 0x57);
 372 |     |     }
 373 |     | }
 374 |     | 

